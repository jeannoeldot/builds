diff -aur pokerth-1.1.2-rc/src/gui/qt/gametable/gametableimpl.cpp pokerth-1.1.2-rc.new/src/gui/qt/gametable/gametableimpl.cpp
--- pokerth-1.1.2-rc/src/gui/qt/gametable/gametableimpl.cpp	2017-08-16 14:24:03.000000000 +0200
+++ pokerth-1.1.2-rc.new/src/gui/qt/gametable/gametableimpl.cpp	2018-10-08 11:38:49.192099039 +0200
@@ -3859,7 +3859,7 @@
 	int playerCount = static_cast<int>(seatList->size());
 	if (id < playerCount) {
 		PlayerListIterator pos = seatList->begin();
-		advance(pos, id);
+		std::advance(pos, id);
 		myStartWindow->getSession()->startVoteKickPlayer((*pos)->getMyUniqueID());
 	}
 }
diff -aur pokerth-1.1.2-rc/src/net/common/clientthread.cpp pokerth-1.1.2-rc.new/src/net/common/clientthread.cpp
--- pokerth-1.1.2-rc/src/net/common/clientthread.cpp	2017-08-16 14:24:03.000000000 +0200
+++ pokerth-1.1.2-rc.new/src/net/common/clientthread.cpp	2018-10-08 11:39:59.010761315 +0200
@@ -993,8 +993,7 @@
 			newSock.reset(new boost::asio::ip::tcp::socket(*m_ioService, tcp::v6()));
 		else
 			newSock.reset(new boost::asio::ip::tcp::socket(*m_ioService, tcp::v4()));
-		boost::asio::socket_base::non_blocking_io command(true);
-		newSock->io_control(command);
+		newSock->non_blocking(true);
 		newSock->set_option(tcp::no_delay(true));
 		newSock->set_option(boost::asio::socket_base::keep_alive(true));
 
diff -aur pokerth-1.1.2-rc/src/net/serveraccepthelper.h pokerth-1.1.2-rc.new/src/net/serveraccepthelper.h
--- pokerth-1.1.2-rc/src/net/serveraccepthelper.h	2017-08-16 14:24:03.000000000 +0200
+++ pokerth-1.1.2-rc.new/src/net/serveraccepthelper.h	2018-10-08 11:40:42.153267460 +0200
@@ -122,8 +122,7 @@
 					  const boost::system::error_code &error)
 	{
 		if (!error) {
-			boost::asio::socket_base::non_blocking_io command(true);
-			acceptedSocket->io_control(command);
+			acceptedSocket->non_blocking(true);
 			acceptedSocket->set_option(typename P::no_delay(true));
 			acceptedSocket->set_option(boost::asio::socket_base::keep_alive(true));
 			boost::shared_ptr<SessionData> sessionData(new SessionData(acceptedSocket, m_lobbyThread->GetNextSessionId(), m_lobbyThread->GetSessionDataCallback(), *m_ioService));
