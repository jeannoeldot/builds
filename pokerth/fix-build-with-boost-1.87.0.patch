diff -aur pokerth-1.1.2-rc/src/db/common/serverdbfactorygeneric.cpp pokerth-1.1.2-rc.new/src/db/common/serverdbfactorygeneric.cpp
--- pokerth-1.1.2-rc/src/db/common/serverdbfactorygeneric.cpp	2017-08-16 14:24:03.000000000 +0200
+++ pokerth-1.1.2-rc.new/src/db/common/serverdbfactorygeneric.cpp	2025-02-10 14:52:12.918579484 +0100
@@ -42,7 +42,7 @@
 }
 
 boost::shared_ptr<ServerDBInterface>
-ServerDBFactoryGeneric::CreateServerDBObject(ServerDBCallback &cb, boost::shared_ptr<boost::asio::io_service> ioService)
+ServerDBFactoryGeneric::CreateServerDBObject(ServerDBCallback &cb, boost::shared_ptr<boost::asio::io_context> ioService)
 {
 	return boost::shared_ptr<ServerDBInterface>(new ServerDBGeneric(cb, ioService));
 }
diff -aur pokerth-1.1.2-rc/src/db/common/serverdbgeneric.cpp pokerth-1.1.2-rc.new/src/db/common/serverdbgeneric.cpp
--- pokerth-1.1.2-rc/src/db/common/serverdbgeneric.cpp	2017-08-16 14:24:03.000000000 +0200
+++ pokerth-1.1.2-rc.new/src/db/common/serverdbgeneric.cpp	2025-02-15 11:11:48.210854662 +0100
@@ -35,7 +35,7 @@
 using namespace std;
 
 
-ServerDBGeneric::ServerDBGeneric(ServerDBCallback &cb, boost::shared_ptr<boost::asio::io_service> ioService)
+ServerDBGeneric::ServerDBGeneric(ServerDBCallback &cb, boost::shared_ptr<boost::asio::io_context> ioService)
 	: m_ioService(ioService), m_callback(cb)
 {
 }
@@ -63,13 +63,13 @@
 void
 ServerDBGeneric::AsyncPlayerLogin(unsigned requestId, const string &/*playerName*/)
 {
-	m_ioService->post(boost::bind(&ServerDBCallback::PlayerLoginFailed, &m_callback, requestId));
+  boost::asio::post(*m_ioService, boost::bind(&ServerDBCallback::PlayerLoginFailed, &m_callback, requestId));
 }
 
 void
 ServerDBGeneric::AsyncCheckAvatarBlacklist(unsigned requestId, const std::string &/*avatarHash*/)
 {
-	m_ioService->post(boost::bind(&ServerDBCallback::AvatarIsBlacklisted, &m_callback, requestId));
+  boost::asio::post(*m_ioService, boost::bind(&ServerDBCallback::AvatarIsBlacklisted, &m_callback, requestId));
 }
 
 void
@@ -85,7 +85,7 @@
 void
 ServerDBGeneric::AsyncCreateGame(unsigned requestId, const string &/*gameName*/)
 {
-	m_ioService->post(boost::bind(&ServerDBCallback::CreateGameFailed, &m_callback, requestId));
+  boost::asio::post(*m_ioService, boost::bind(&ServerDBCallback::CreateGameFailed, &m_callback, requestId));
 }
 
 void
@@ -101,13 +101,13 @@
 void
 ServerDBGeneric::AsyncReportAvatar(unsigned requestId, unsigned replyId, DB_id /*reportedPlayerId*/, const std::string &/*avatarHash*/, const std::string &/*avatarType*/, DB_id * /*byPlayerId*/)
 {
-	m_ioService->post(boost::bind(&ServerDBCallback::ReportAvatarFailed, &m_callback, requestId, replyId));
+  boost::asio::post(*m_ioService, boost::bind(&ServerDBCallback::ReportAvatarFailed, &m_callback, requestId, replyId));
 }
 
 void
 ServerDBGeneric::AsyncReportGame(unsigned requestId, unsigned replyId, DB_id * /*creatorPlayerId*/, unsigned /*gameId*/, const std::string &/*gameName*/, DB_id * /*byPlayerId*/)
 {
-	m_ioService->post(boost::bind(&ServerDBCallback::ReportGameFailed, &m_callback, requestId, replyId));
+  boost::asio::post(*m_ioService, boost::bind(&ServerDBCallback::ReportGameFailed, &m_callback, requestId, replyId));
 }
 
 void
diff -aur pokerth-1.1.2-rc/src/db/serverdbfactory.h pokerth-1.1.2-rc.new/src/db/serverdbfactory.h
--- pokerth-1.1.2-rc/src/db/serverdbfactory.h	2017-08-16 14:24:03.000000000 +0200
+++ pokerth-1.1.2-rc.new/src/db/serverdbfactory.h	2025-02-10 14:42:47.791246287 +0100
@@ -44,7 +44,7 @@
 	virtual ~ServerDBFactory();
 
 	virtual boost::shared_ptr<ServerDBInterface> CreateServerDBObject(
-		ServerDBCallback &cb, boost::shared_ptr<boost::asio::io_service> ioService) = 0;
+		ServerDBCallback &cb, boost::shared_ptr<boost::asio::io_context> ioService) = 0;
 };
 
 #endif
diff -aur pokerth-1.1.2-rc/src/db/serverdbfactorygeneric.h pokerth-1.1.2-rc.new/src/db/serverdbfactorygeneric.h
--- pokerth-1.1.2-rc/src/db/serverdbfactorygeneric.h	2017-08-16 14:24:03.000000000 +0200
+++ pokerth-1.1.2-rc.new/src/db/serverdbfactorygeneric.h	2025-02-10 14:55:14.904718851 +0100
@@ -45,7 +45,7 @@
 	virtual ~ServerDBFactoryGeneric();
 
 	virtual boost::shared_ptr<ServerDBInterface> CreateServerDBObject(
-		ServerDBCallback &cb, boost::shared_ptr<boost::asio::io_service> ioService);
+		ServerDBCallback &cb, boost::shared_ptr<boost::asio::io_context> ioService);
 };
 
 typedef ServerDBFactoryGeneric DBFactory;
diff -aur pokerth-1.1.2-rc/src/db/serverdbgeneric.h pokerth-1.1.2-rc.new/src/db/serverdbgeneric.h
--- pokerth-1.1.2-rc/src/db/serverdbgeneric.h	2017-08-16 14:24:03.000000000 +0200
+++ pokerth-1.1.2-rc.new/src/db/serverdbgeneric.h	2025-02-10 14:30:31.195364419 +0100
@@ -41,7 +41,7 @@
 class ServerDBGeneric : public ServerDBInterface
 {
 public:
-	ServerDBGeneric(ServerDBCallback &cb, boost::shared_ptr<boost::asio::io_service> ioService);
+	ServerDBGeneric(ServerDBCallback &cb, boost::shared_ptr<boost::asio::io_context> ioService);
 	virtual ~ServerDBGeneric();
 
 	virtual void Init(const std::string &host, const std::string &user, const std::string &pwd,
@@ -66,7 +66,7 @@
 	virtual void AsyncBlockPlayer(unsigned requestId, unsigned replyId, DB_id playerId, int valid, int active);
 
 private:
-	boost::shared_ptr<boost::asio::io_service> m_ioService;
+	boost::shared_ptr<boost::asio::io_context> m_ioService;
 	ServerDBCallback &m_callback;
 };
 
diff -aur pokerth-1.1.2-rc/src/net/clientthread.h pokerth-1.1.2-rc.new/src/net/clientthread.h
--- pokerth-1.1.2-rc/src/net/clientthread.h	2017-08-16 14:24:03.000000000 +0200
+++ pokerth-1.1.2-rc.new/src/net/clientthread.h	2025-02-15 11:26:09.703943446 +0100
@@ -285,7 +285,7 @@
 
 private:
 
-	boost::shared_ptr<boost::asio::io_service> m_ioService;
+	boost::shared_ptr<boost::asio::io_context> m_ioService;
 	boost::shared_ptr<Log> m_clientLog;
 
 	Gsasl *m_authContext;
diff -aur pokerth-1.1.2-rc/src/net/servermanager.h pokerth-1.1.2-rc.new/src/net/servermanager.h
--- pokerth-1.1.2-rc/src/net/servermanager.h	2017-08-16 14:24:03.000000000 +0200
+++ pokerth-1.1.2-rc.new/src/net/servermanager.h	2025-02-15 11:29:11.037374118 +0100
@@ -75,7 +75,7 @@
 	{
 		return m_gui;
 	}
-	boost::shared_ptr<boost::asio::io_service> m_ioService;
+	boost::shared_ptr<boost::asio::io_context> m_ioService;
 	boost::shared_ptr<ServerLobbyThread> m_lobbyThread;
 
 private:
