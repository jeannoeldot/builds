diff -aur mozilla-release/browser/app/profile/firefox.js mozilla-release.new/browser/app/profile/firefox.js
--- mozilla-release/browser/app/profile/firefox.js	2013-05-11 21:19:20.000000000 +0200
+++ mozilla-release.new/browser/app/profile/firefox.js	2013-05-26 06:49:10.077604057 +0200
@@ -199,6 +199,7 @@
 pref("extensions.dss.enabled", false);          // Dynamic Skin Switching                                               
 pref("extensions.dss.switchPending", false);    // Non-dynamic switch pending after next
                                                 // restart.
+pref("extensions.closeOnEscape", false); // allow the escape key to close the add-ons manager if it is standalone
 
 pref("extensions.{972ce4c6-7e08-4474-a285-3208198ce6fd}.name", "chrome://browser/locale/browser.properties");
 pref("extensions.{972ce4c6-7e08-4474-a285-3208198ce6fd}.description", "chrome://browser/locale/browser.properties");
diff -aur mozilla-release/caps/src/nsScriptSecurityManager.cpp mozilla-release.new/caps/src/nsScriptSecurityManager.cpp
--- mozilla-release/caps/src/nsScriptSecurityManager.cpp	2013-05-11 21:19:23.000000000 +0200
+++ mozilla-release.new/caps/src/nsScriptSecurityManager.cpp	2013-05-26 06:54:05.637248367 +0200
@@ -1414,6 +1414,7 @@
                              &hasFlags);
     NS_ENSURE_SUCCESS(rv, rv);
     if (hasFlags) {
+        return NS_OK;
         if (aFlags & nsIScriptSecurityManager::ALLOW_CHROME) {
             if (!targetScheme.EqualsLiteral("chrome")) {
                 // for now don't change behavior for resource: or moz-icon:
@@ -1455,6 +1456,7 @@
                              &hasFlags);
     NS_ENSURE_SUCCESS(rv, rv);
     if (hasFlags) {
+        return NS_OK;
         // resource: and chrome: are equivalent, securitywise
         // That's bogus!!  Fix this.  But watch out for
         // the view-source stylesheet?
diff -aur mozilla-release/content/base/public/nsIDocumentEncoder.idl mozilla-release.new/content/base/public/nsIDocumentEncoder.idl
--- mozilla-release/content/base/public/nsIDocumentEncoder.idl	2013-05-11 21:19:23.000000000 +0200
+++ mozilla-release.new/content/base/public/nsIDocumentEncoder.idl	2013-05-26 06:57:26.638294867 +0200
@@ -35,7 +35,7 @@
   nsIDOMNode fixupNode(in nsIDOMNode aNode, out boolean aSerializeCloneKids);
 };
 
-[scriptable, uuid(7222bdf1-c2b9-41f1-a40a-a3d65283a95b)]
+[scriptable, uuid(30a3161c-09e0-425e-84e6-ff952c0fd859)]
 interface nsIDocumentEncoder : nsISupports
 {
   // Output methods flag bits. There are a frightening number of these,
@@ -204,6 +204,11 @@
    */
   const unsigned long OutputFormatDelSp  = (1 << 20);
  
+ /**
+   * Output all non-ascii characters as numeric entities
+   */
+  const unsigned long OutputEncodeCharacterEntities = (1 << 21);
+
   /**
    * Drop <br> elements considered "invisible" by the editor. OutputPreformatted
    * implies this flag.
diff -aur mozilla-release/content/base/src/nsCopySupport.cpp mozilla-release.new/content/base/src/nsCopySupport.cpp
--- mozilla-release/content/base/src/nsCopySupport.cpp	2013-05-11 21:19:23.000000000 +0200
+++ mozilla-release.new/content/base/src/nsCopySupport.cpp	2013-05-26 07:10:35.432239816 +0200
@@ -580,8 +580,9 @@
 
   // init encoder with document and node
   rv = docEncoder->Init(domDocument, NS_LITERAL_STRING(kHTMLMime),
-                        nsIDocumentEncoder::OutputAbsoluteLinks |
-                        nsIDocumentEncoder::OutputEncodeW3CEntities);
+                        Preferences::GetBool("clipboard.absoluteLinks", true)
+                          ? nsIDocumentEncoder::OutputEncodeCharacterEntities | nsIDocumentEncoder::OutputAbsoluteLinks
+                          : nsIDocumentEncoder::OutputEncodeCharacterEntities);
   NS_ENSURE_SUCCESS(rv, rv);
 
   rv = docEncoder->SetNode(aDOMNode);
diff -aur mozilla-release/content/base/src/nsDocument.cpp mozilla-release.new/content/base/src/nsDocument.cpp
--- mozilla-release/content/base/src/nsDocument.cpp	2013-05-11 21:19:23.000000000 +0200
+++ mozilla-release.new/content/base/src/nsDocument.cpp	2013-06-08 11:55:23.481896260 +0200
@@ -6041,6 +6041,13 @@
 }
 
 NS_IMETHODIMP
+nsDocument::GetHasXMLDeclaration(bool *aHasXMLDeclaration)
+{
+  *aHasXMLDeclaration = mXMLDeclarationBits & XML_DECLARATION_BITS_DECLARATION_EXISTS;
+  return NS_OK;
+}
+
+NS_IMETHODIMP
 nsDocument::GetDocumentURI(nsAString& aDocumentURI)
 {
   nsString temp;
diff -aur mozilla-release/content/base/src/nsDocumentEncoder.cpp mozilla-release.new/content/base/src/nsDocumentEncoder.cpp
--- mozilla-release/content/base/src/nsDocumentEncoder.cpp	2013-05-11 21:19:23.000000000 +0200
+++ mozilla-release.new/content/base/src/nsDocumentEncoder.cpp	2013-06-08 12:01:32.560158134 +0200
@@ -52,6 +52,8 @@
 #include "nsIHTMLEditor.h"
 #include "nsIDocShell.h"
 
+#include "mozilla/Preferences.h"
+
 using namespace mozilla;
 using namespace mozilla::dom;
 
@@ -109,6 +111,11 @@
     if (mFlags & SkipInvisibleContent) {
       nsCOMPtr<nsIContent> content = do_QueryInterface(aNode);
       if (content) {
+        nsIAtom *tag = content->Tag();
+        if (tag == nsGkAtoms::script
+            || tag == nsGkAtoms::style) {
+          return true;
+        }
         nsIFrame* frame = content->GetPrimaryFrame();
         if (!frame) {
           if (aNode->IsNodeOfType(nsINode::eTEXT)) {
@@ -1323,6 +1330,9 @@
 
   // Make all links absolute when copying
   // (see related bugs #57296, #41924, #58646, #32768)
+  mFlags = Preferences::GetBool("clipboard.absoluteLinks", true)
+            ? aFlags | nsIDocumentEncoder::OutputAbsoluteLinks
+            : aFlags;
   mFlags = aFlags | OutputAbsoluteLinks;
 
   if (!mDocument->IsScriptEnabled())
@@ -1389,7 +1399,7 @@
   
   // also consider ourselves in a text widget if we can't find an html document
   nsCOMPtr<nsIHTMLDocument> htmlDoc = do_QueryInterface(mDocument);
-  if (!(htmlDoc && mDocument->IsHTML()))
+  if (!htmlDoc)
     mIsTextWidget = true;
   
   // normalize selection if we are not in a widget
diff -aur mozilla-release/content/base/src/nsHTMLContentSerializer.cpp mozilla-release.new/content/base/src/nsHTMLContentSerializer.cpp
--- mozilla-release/content/base/src/nsHTMLContentSerializer.cpp	2013-05-11 21:19:23.000000000 +0200
+++ mozilla-release.new/content/base/src/nsHTMLContentSerializer.cpp	2013-06-09 07:03:36.778254319 +0200
@@ -190,101 +190,111 @@
   }
 
   nsIAtom *name = content->Tag();
-  int32_t ns = content->GetNameSpaceID();
-
-  bool lineBreakBeforeOpen = LineBreakBeforeOpen(ns, name);
+  PRInt32 ns = content->GetNameSpaceID();
 
-  if ((mDoFormat || forceFormat) && !mPreLevel && !mDoRaw) {
-    if (mColPos && lineBreakBeforeOpen) {
-      AppendNewLineToString(aStr);
-    }
+  bool hideTag = false;
+  if (ns != kNameSpaceID_XHTML) {
+    nsAutoString nsStr;
+    nsresult rv = nsContentUtils::NameSpaceManager()->GetNameSpaceURI(ns, nsStr);
+    hideTag = ( NS_SUCCEEDED(rv) && nsStr.LowerCaseEqualsLiteral("http://disruptive-innovations.com/zoo/bluegriffon"));
+  }
+
+  if (!hideTag) {
+    bool lineBreakBeforeOpen = LineBreakBeforeOpen(ns, name);
+
+    if (((mDoFormat || forceFormat) && !mPreLevel) || mDoRaw) {
+      if (mColPos && lineBreakBeforeOpen) {
+        AppendNewLineToString(aStr);
+        mMayIgnoreLineBreakSequence = PR_FALSE;
+      }
+      else {
+        MaybeAddNewlineForRootNode(aStr);
+      }
+      if (!mColPos && !mDoRaw) {
+        AppendIndentation(aStr);
+      }
+      else if (mAddSpace) {
+        AppendToString(PRUnichar(' '), aStr);
+        mAddSpace = false;
+      }
+     }
+     else if (mAddSpace) {
+       AppendToString(PRUnichar(' '), aStr);
+       mAddSpace = false;
+     }
     else {
       MaybeAddNewlineForRootNode(aStr);
     }
-    if (!mColPos) {
-      AppendIndentation(aStr);
-    }
-    else if (mAddSpace) {
-      AppendToString(PRUnichar(' '), aStr);
-      mAddSpace = false;
+    // Always reset to avoid false newlines in case MaybeAddNewlineForRootNode wasn't
+    // called
+    mAddNewlineForRootNode = false;
+
+    AppendToString(kLessThan, aStr);
+
+    AppendToString(nsDependentAtomString(name), aStr);
+
+    MaybeEnterInPreContent(content);
+
+    // for block elements, we increase the indentation
+    if ((mDoFormat || forceFormat) && !mPreLevel && !mDoRaw)
+      IncrIndentation(name);
+
+    // Need to keep track of OL and LI elements in order to get ordinal number
+    // for the LI.
+    if (mIsCopying && name == nsGkAtoms::ol && ns == kNameSpaceID_XHTML){
+      // We are copying and current node is an OL;
+      // Store its start attribute value in olState->startVal.
+      nsAutoString start;
+      PRInt32 startAttrVal = 0;
+
+      aElement->GetAttr(kNameSpaceID_None, nsGkAtoms::start, start);
+      if (!start.IsEmpty()){
+        nsresult rv = NS_OK;
+        startAttrVal = start.ToInteger(&rv);
+        //If OL has "start" attribute, first LI element has to start with that value
+        //Therefore subtracting 1 as all the LI elements are incrementing it before using it;
+        //In failure of ToInteger(), default StartAttrValue to 0.
+        if (NS_SUCCEEDED(rv))
+          startAttrVal--;
+        else
+          startAttrVal = 0;
+      }
+      mOLStateStack.AppendElement(olState(startAttrVal, true));
     }
-  }
-  else if (mAddSpace) {
-    AppendToString(PRUnichar(' '), aStr);
-    mAddSpace = false;
-  }
-  else {
-    MaybeAddNewlineForRootNode(aStr);
-  }
-  // Always reset to avoid false newlines in case MaybeAddNewlineForRootNode wasn't
-  // called
-  mAddNewlineForRootNode = false;
-  
-  AppendToString(kLessThan, aStr);
-
-  AppendToString(nsDependentAtomString(name), aStr);
-
-  MaybeEnterInPreContent(content);
 
-  // for block elements, we increase the indentation
-  if ((mDoFormat || forceFormat) && !mPreLevel && !mDoRaw)
-    IncrIndentation(name);
-
-  // Need to keep track of OL and LI elements in order to get ordinal number 
-  // for the LI.
-  if (mIsCopying && name == nsGkAtoms::ol && ns == kNameSpaceID_XHTML){
-    // We are copying and current node is an OL;
-    // Store its start attribute value in olState->startVal.
-    nsAutoString start;
-    int32_t startAttrVal = 0;
-
-    aElement->GetAttr(kNameSpaceID_None, nsGkAtoms::start, start);
-    if (!start.IsEmpty()){
-      nsresult rv = NS_OK;
-      startAttrVal = start.ToInteger(&rv);
-      //If OL has "start" attribute, first LI element has to start with that value
-      //Therefore subtracting 1 as all the LI elements are incrementing it before using it;
-      //In failure of ToInteger(), default StartAttrValue to 0.
-      if (NS_SUCCEEDED(rv))
-        startAttrVal--; 
-      else
-        startAttrVal = 0;
-    }
-    mOLStateStack.AppendElement(olState(startAttrVal, true));
-  }
-
-  if (mIsCopying && name == nsGkAtoms::li && ns == kNameSpaceID_XHTML) {
-    mIsFirstChildOfOL = IsFirstChildOfOL(aOriginalElement);
-    if (mIsFirstChildOfOL){
-      // If OL is parent of this LI, serialize attributes in different manner.
-      SerializeLIValueAttribute(aElement, aStr);
+    if (mIsCopying && name == nsGkAtoms::li && ns == kNameSpaceID_XHTML) {
+      mIsFirstChildOfOL = IsFirstChildOfOL(aOriginalElement);
+      if (mIsFirstChildOfOL){
+        // If OL is parent of this LI, serialize attributes in different manner.
+        SerializeLIValueAttribute(aElement, aStr);
+      }
     }
-  }
-
-  // Even LI passed above have to go through this 
-  // for serializing attributes other than "value".
-  nsAutoString dummyPrefix;
-  SerializeHTMLAttributes(content,
-                          aOriginalElement,
-                          dummyPrefix,
-                          EmptyString(),
-                          name,
-                          ns,
-                          aStr);
+ 
+    // Even LI passed above have to go through this
+    // for serializing attributes other than "value".
+    nsAutoString dummyPrefix;
+    SerializeHTMLAttributes(content,
+                            aOriginalElement,
+                            dummyPrefix,
+                            EmptyString(),
+                            name,
+                            ns,
+                            aStr);
 
   AppendToString(kGreaterThan, aStr);
 
-  if (ns == kNameSpaceID_XHTML &&
-      (name == nsGkAtoms::script ||
-       name == nsGkAtoms::style ||
-       name == nsGkAtoms::noscript ||
-       name == nsGkAtoms::noframes)) {
-    ++mDisableEntityEncoding;
-  }
+    if (ns == kNameSpaceID_XHTML &&
+        (name == nsGkAtoms::script ||
+         name == nsGkAtoms::style ||
+         name == nsGkAtoms::noscript ||
+         name == nsGkAtoms::noframes)) {
+      ++mDisableEntityEncoding;
+    }
 
-  if ((mDoFormat || forceFormat) && !mPreLevel &&
-    !mDoRaw && LineBreakAfterOpen(ns, name)) {
-    AppendNewLineToString(aStr);
+    if ((mDoFormat || forceFormat) && !mPreLevel &&
+      !mDoRaw && LineBreakAfterOpen(ns, name)) {
+      AppendNewLineToString(aStr);
+    }
   }
 
   AfterElementStart(content, aOriginalElement, aStr);
@@ -303,6 +313,13 @@
   nsIAtom *name = content->Tag();
   int32_t ns = content->GetNameSpaceID();
 
+  if (ns != kNameSpaceID_XHTML) {
+    nsAutoString nsStr;
+    nsresult rv = nsContentUtils::NameSpaceManager()->GetNameSpaceURI(ns, nsStr);
+    if (NS_SUCCEEDED(rv) && nsStr.LowerCaseEqualsLiteral("http://disruptive-innovations.com/zoo/bluegriffon"))
+      return NS_OK;
+  }
+
   if (ns == kNameSpaceID_XHTML &&
       (name == nsGkAtoms::script ||
        name == nsGkAtoms::style ||
@@ -469,7 +486,8 @@
   bool nonBasicEntities =
     !!(mFlags & (nsIDocumentEncoder::OutputEncodeLatin1Entities |
                  nsIDocumentEncoder::OutputEncodeHTMLEntities   |
-                 nsIDocumentEncoder::OutputEncodeW3CEntities));
+                 nsIDocumentEncoder::OutputEncodeW3CEntities    |
+                 nsIDocumentEncoder::OutputEncodeCharacterEntities));
 
   if (!nonBasicEntities &&
       (mFlags & (nsIDocumentEncoder::OutputEncodeBasicEntities))) {
@@ -525,7 +543,13 @@
       // needs to be replaced
       for (; c < fragmentEnd; c++, advanceLength++) {
         PRUnichar val = *c;
-        if (val <= kValNBSP && entityTable[val]) {
+        if ((val == kValNBSP || val > 127) &&
+            (mFlags & nsIDocumentEncoder::OutputEncodeCharacterEntities)) {
+          nsAutoString entityValue(PRUnichar('#'));
+          entityValue.AppendInt(val);
+          entityText = ToNewCString(entityValue);
+          break;
+        } else if (val <= kValNBSP && entityTable[val]) {
           fullConstEntityText = entityTable[val];
           break;
         } else if (val > 127 &&
diff -aur mozilla-release/content/base/src/nsXHTMLContentSerializer.cpp mozilla-release.new/content/base/src/nsXHTMLContentSerializer.cpp
--- mozilla-release/content/base/src/nsXHTMLContentSerializer.cpp	2013-05-11 21:19:23.000000000 +0200
+++ mozilla-release.new/content/base/src/nsXHTMLContentSerializer.cpp	2013-06-08 12:22:58.412219655 +0200
@@ -65,14 +65,6 @@
                               const char* aCharSet, bool aIsCopying,
                               bool aRewriteEncodingDeclaration)
 {
-  // The previous version of the HTML serializer did implicit wrapping
-  // when there is no flags, so we keep wrapping in order to keep
-  // compatibility with the existing calling code
-  // XXXLJ perhaps should we remove this default settings later ?
-  if (aFlags & nsIDocumentEncoder::OutputFormatted ) {
-      aFlags = aFlags | nsIDocumentEncoder::OutputWrap;
-  }
-
   nsresult rv;
   rv = nsXMLContentSerializer::Init(aFlags, aWrapColumn, aCharSet, aIsCopying, aRewriteEncodingDeclaration);
   NS_ENSURE_SUCCESS(rv, rv);
@@ -732,7 +724,16 @@
       aName == nsGkAtoms::select ||
       aName == nsGkAtoms::option ||
       aName == nsGkAtoms::script ||
-      aName == nsGkAtoms::html) {
+      aName == nsGkAtoms::html ||
+      aName == nsGkAtoms::head ||
+      //aName == nsGkAtoms::body ||
+      aName == nsGkAtoms::table ||
+      aName == nsGkAtoms::caption ||
+      aName == nsGkAtoms::tbody ||
+      aName == nsGkAtoms::thead ||
+      aName == nsGkAtoms::tfoot ||
+      aName == nsGkAtoms::tr ||
+      aName == nsGkAtoms::td) {
     return true;
   }
   else {
@@ -759,7 +760,7 @@
 
   if ((aName == nsGkAtoms::html) ||
       (aName == nsGkAtoms::head) ||
-      (aName == nsGkAtoms::body) ||
+      //(aName == nsGkAtoms::body) ||
       (aName == nsGkAtoms::ul) ||
       (aName == nsGkAtoms::ol) ||
       (aName == nsGkAtoms::dl) ||
@@ -796,7 +797,10 @@
       (aName == nsGkAtoms::dl) ||
       (aName == nsGkAtoms::select) ||
       (aName == nsGkAtoms::table) ||
-      (aName == nsGkAtoms::tbody)) {
+      (aName == nsGkAtoms::tbody) ||
+      (aName == nsGkAtoms::thead) ||
+      (aName == nsGkAtoms::tfoot) ||
+      (aName == nsGkAtoms::tr)) {
     return true;
   }
   return false;
@@ -861,6 +865,8 @@
       name == nsGkAtoms::noframes
       ) {
     mPreLevel++;
+    if (name != nsGkAtoms::pre)
+      ++mDisableEntityEncoding;
   }
 }
 
@@ -879,6 +885,8 @@
       name == nsGkAtoms::noframes
     ) {
     --mPreLevel;
+    if (name != nsGkAtoms::pre)
+      --mDisableEntityEncoding;
   }
 }
 
diff -aur mozilla-release/content/base/src/nsXMLContentSerializer.cpp mozilla-release.new/content/base/src/nsXMLContentSerializer.cpp
--- mozilla-release/content/base/src/nsXMLContentSerializer.cpp	2013-05-11 21:19:23.000000000 +0200
+++ mozilla-release.new/content/base/src/nsXMLContentSerializer.cpp	2013-06-09 07:08:41.891322190 +0200
@@ -616,7 +616,25 @@
   bool rawAppend = mDoRaw && aDoEscapeEntities;
   nsAString& attrString = (rawAppend) ? aStr : attrString_;
 
-  attrString.Append(PRUnichar(' '));
+  if (mColPos + 1 >= mMaxColumn && !mDoRaw) {
+    if (mPreLevel > 0) {
+      AppendToStringConvertLF(mLineBreak, aStr);
+    }
+    else if (mDoFormat) {
+      AppendToStringFormatedWrapped(mLineBreak, aStr);
+      AppendIndentation(aStr);
+    }
+    else if (mDoWrap) {
+      AppendToStringWrapped(mLineBreak, aStr);
+      AppendIndentation(aStr);
+    }
+    else {
+      AppendToStringConvertLF(mLineBreak, aStr);
+    }
+  }
+  else
+    attrString.Append(PRUnichar(' '));
+
   if (!aPrefix.IsEmpty()) {
     attrString.Append(aPrefix);
     attrString.Append(PRUnichar(':'));
@@ -690,6 +708,8 @@
     attrString.Append(sValue);
     attrString.Append(cDelimiter);
   }
+  AppendToStringConvertLF(attrString, aStr);
+  /* XXX
   if (mPreLevel > 0 || mDoRaw) {
     AppendToStringConvertLF(attrString, aStr);
   }
@@ -702,6 +722,7 @@
   else {
     AppendToStringConvertLF(attrString, aStr);
   }
+  */
 }
 
 uint32_t 
@@ -889,66 +910,74 @@
   aElement->NodeInfo()->GetName(tagLocalName);
   aElement->NodeInfo()->GetNamespaceURI(tagNamespaceURI);
 
-  uint32_t skipAttr = ScanNamespaceDeclarations(content,
-                          aOriginalElement, tagNamespaceURI);
-
-  nsIAtom *name = content->Tag();
-  bool lineBreakBeforeOpen = LineBreakBeforeOpen(content->GetNameSpaceID(), name);
-
-  if ((mDoFormat || forceFormat) && !mPreLevel && !mDoRaw) {
-    if (mColPos && lineBreakBeforeOpen) {
-      AppendNewLineToString(aStr);
-    }
-    else {
-      MaybeAddNewlineForRootNode(aStr);
-    }
-    if (!mColPos) {
-      AppendIndentation(aStr);
+  bool hideTag = tagNamespaceURI.LowerCaseEqualsLiteral("http://disruptive-innovations.com/zoo/bluegriffon");
+  if (!hideTag) {
+    PRUint32 skipAttr = ScanNamespaceDeclarations(content,
+                            aOriginalElement, tagNamespaceURI);
+
+    nsIAtom *name = content->Tag();
+    bool lineBreakBeforeOpen = LineBreakBeforeOpen(content->GetNameSpaceID(), name);
+
+    if (((mDoFormat || forceFormat) && !mPreLevel) || mDoRaw) {
+      if (mColPos && lineBreakBeforeOpen) {
+        AppendNewLineToString(aStr);
+      }
+      else {
+        MaybeAddNewlineForRootNode(aStr);
+      }
+      if (!mColPos) {
+        AppendIndentation(aStr);
+      }
+      else if (mAddSpace) {
+        AppendToString(PRUnichar(' '), aStr);
+        mAddSpace = false;
+      }
     }
     else if (mAddSpace) {
       AppendToString(PRUnichar(' '), aStr);
       mAddSpace = false;
     }
-  }
-  else if (mAddSpace) {
-    AppendToString(PRUnichar(' '), aStr);
-    mAddSpace = false;
-  }
-  else {
-    MaybeAddNewlineForRootNode(aStr);
-  }
+    else {
+      MaybeAddNewlineForRootNode(aStr);
+    }
 
-  // Always reset to avoid false newlines in case MaybeAddNewlineForRootNode wasn't
-  // called
-  mAddNewlineForRootNode = false;
+    // Always reset to avoid false newlines in case MaybeAddNewlineForRootNode wasn't
+    // called
+    mAddNewlineForRootNode = false;
 
-  bool addNSAttr;
-  addNSAttr = ConfirmPrefix(tagPrefix, tagNamespaceURI, aOriginalElement,
-                            false);
+    bool addNSAttr;
+    addNSAttr = ConfirmPrefix(tagPrefix, tagNamespaceURI, aOriginalElement,
+                              false);
 
-  // Serialize the qualified name of the element
-  AppendToString(kLessThan, aStr);
-  if (!tagPrefix.IsEmpty()) {
-    AppendToString(tagPrefix, aStr);
-    AppendToString(NS_LITERAL_STRING(":"), aStr);
-  }
-  AppendToString(tagLocalName, aStr);
+    if (!mNameSpaceStack.Length()
+        && tagNamespaceURI.EqualsLiteral("http://www.w3.org/1999/xhtml")
+        && !tagLocalName.EqualsLiteral("html"))
+      addNSAttr = PR_FALSE;
 
-  MaybeEnterInPreContent(content);
+    // Serialize the qualified name of the element
+    AppendToString(kLessThan, aStr);
+    if (!tagPrefix.IsEmpty()) {
+      AppendToString(tagPrefix, aStr);
+      AppendToString(NS_LITERAL_STRING(":"), aStr);
+    }
+    AppendToString(tagLocalName, aStr);
 
-  if ((mDoFormat || forceFormat) && !mPreLevel && !mDoRaw) {
-    IncrIndentation(name);
-  }
+    MaybeEnterInPreContent(content);
 
-  SerializeAttributes(content, aOriginalElement, tagPrefix, tagNamespaceURI,
-                      name, aStr, skipAttr, addNSAttr);
+    if ((mDoFormat || forceFormat) && !mPreLevel && !mDoRaw) {
+      IncrIndentation(name);
+    }
 
-  AppendEndOfElementStart(aOriginalElement, name, content->GetNameSpaceID(),
-                          aStr);
+    SerializeAttributes(content, aOriginalElement, tagPrefix, tagNamespaceURI,
+                        name, aStr, skipAttr, addNSAttr);
 
-  if ((mDoFormat || forceFormat) && !mPreLevel 
-    && !mDoRaw && LineBreakAfterOpen(content->GetNameSpaceID(), name)) {
-    AppendNewLineToString(aStr);
+    AppendEndOfElementStart(aOriginalElement, name, content->GetNameSpaceID(),
+                            aStr);
+
+    if ((mDoFormat || forceFormat) && !mPreLevel
+      && !mDoRaw && LineBreakAfterOpen(content->GetNameSpaceID(), name)) {
+      AppendNewLineToString(aStr);
+    }
   }
 
   AfterElementStart(content, aOriginalElement, aStr);
@@ -979,71 +1008,73 @@
 
   nsIContent* content = aElement;
 
-  bool forceFormat = false, outputElementEnd;
-  outputElementEnd = CheckElementEnd(content, forceFormat, aStr);
+  nsAutoString tagPrefix, tagLocalName, tagNamespaceURI;
 
-  nsIAtom *name = content->Tag();
+  aElement->NodeInfo()->GetPrefix(tagPrefix);
+  aElement->NodeInfo()->GetName(tagLocalName);
+  aElement->NodeInfo()->GetNamespaceURI(tagNamespaceURI);
 
-  if ((mDoFormat || forceFormat) && !mPreLevel && !mDoRaw) {
-    DecrIndentation(name);
-  }
+  bool hideTag = tagNamespaceURI.LowerCaseEqualsLiteral("http://disruptive-innovations.com/zoo/bluegriffon");
+  if (!hideTag) {
+    bool forceFormat = false, outputElementEnd;
+    outputElementEnd = CheckElementEnd(content, forceFormat, aStr);
 
-  if (!outputElementEnd) {
-    PopNameSpaceDeclsFor(aElement);
-    MaybeFlagNewlineForRootNode(aElement);
-    return NS_OK;
-  }
+    nsIAtom *name = content->Tag();
 
-  nsAutoString tagPrefix, tagLocalName, tagNamespaceURI;
+    if ((mDoFormat || forceFormat) && !mPreLevel && !mDoRaw) {
+      DecrIndentation(name);
+    }
   
-  aElement->NodeInfo()->GetPrefix(tagPrefix);
-  aElement->NodeInfo()->GetName(tagLocalName);
-  aElement->NodeInfo()->GetNamespaceURI(tagNamespaceURI);
+    if (!outputElementEnd) {
+      PopNameSpaceDeclsFor(aElement);
+      MaybeFlagNewlineForRootNode(aElement);
+      return NS_OK;
+    }
 
-#ifdef DEBUG
-  bool debugNeedToPushNamespace =
-#endif
-  ConfirmPrefix(tagPrefix, tagNamespaceURI, aElement, false);
-  NS_ASSERTION(!debugNeedToPushNamespace, "Can't push namespaces in closing tag!");
+  #ifdef DEBUG
+    bool debugNeedToPushNamespace =
+  #endif
+    ConfirmPrefix(tagPrefix, tagNamespaceURI, aElement, false);
+    NS_ASSERTION(!debugNeedToPushNamespace, "Can't push namespaces in closing tag!");
 
-  if ((mDoFormat || forceFormat) && !mPreLevel && !mDoRaw) {
+    if ((mDoFormat || forceFormat) && !mPreLevel && !mDoRaw) {
 
-    bool lineBreakBeforeClose = LineBreakBeforeClose(content->GetNameSpaceID(), name);
+      bool lineBreakBeforeClose = LineBreakBeforeClose(content->GetNameSpaceID(), name);
 
-    if (mColPos && lineBreakBeforeClose) {
-      AppendNewLineToString(aStr);
-    }
-    if (!mColPos) {
-      AppendIndentation(aStr);
+      if (mColPos && lineBreakBeforeClose) {
+        AppendNewLineToString(aStr);
+      }
+      if (!mColPos) {
+        AppendIndentation(aStr);
+      }
+      else if (mAddSpace) {
+        AppendToString(PRUnichar(' '), aStr);
+        mAddSpace = false;
+      }
     }
     else if (mAddSpace) {
       AppendToString(PRUnichar(' '), aStr);
       mAddSpace = false;
     }
-  }
-  else if (mAddSpace) {
-    AppendToString(PRUnichar(' '), aStr);
-    mAddSpace = false;
-  }
-
-  AppendToString(kEndTag, aStr);
-  if (!tagPrefix.IsEmpty()) {
-    AppendToString(tagPrefix, aStr);
-    AppendToString(NS_LITERAL_STRING(":"), aStr);
-  }
-  AppendToString(tagLocalName, aStr);
-  AppendToString(kGreaterThan, aStr);
+    AppendToString(kEndTag, aStr);
+    if (!tagPrefix.IsEmpty()) {
+      AppendToString(tagPrefix, aStr);
+      AppendToString(NS_LITERAL_STRING(":"), aStr);
+    }
+    AppendToString(tagLocalName, aStr);
+    AppendToString(kGreaterThan, aStr);
 
-  PopNameSpaceDeclsFor(aElement);
+    PopNameSpaceDeclsFor(aElement);
 
-  MaybeLeaveFromPreContent(content);
+    MaybeLeaveFromPreContent(content);
 
-  if ((mDoFormat || forceFormat) && !mPreLevel
-      && !mDoRaw && LineBreakAfterClose(content->GetNameSpaceID(), name)) {
-    AppendNewLineToString(aStr);
-  }
-  else {
-    MaybeFlagNewlineForRootNode(aElement);
+    if ((mDoFormat || forceFormat) && !mPreLevel
+        && !mDoRaw && LineBreakAfterClose(content->GetNameSpaceID(), name)) {
+      AppendNewLineToString(aStr);
+    }
+    else {
+      MaybeFlagNewlineForRootNode(aElement);
+    }
   }
 
   AfterElementEnd(content, aStr);
@@ -1127,6 +1158,23 @@
     return;
   }
   mColPos += aStr.Length();
+  nsASingleFragmentString::const_char_iterator pos, end, sequenceStart;
+
+  aStr.BeginReading(pos);
+  aStr.EndReading(end);
+  bool foundCR = PR_FALSE;
+  bool foundOtherThanCROrBlank = PR_FALSE;
+  while (pos < end) {
+    if (*pos == '\n' || *pos == '\r')
+      foundCR = PR_TRUE;
+    else if (*pos != ' ' && *pos != '\t')
+      foundOtherThanCROrBlank = PR_TRUE;
+    pos++;
+  }
+
+  if (foundCR && !foundOtherThanCROrBlank) {
+    mMayIgnoreLineBreakSequence = PR_TRUE;
+  }
   aOutputStr.Append(aStr);
 }
 
@@ -1237,6 +1285,10 @@
 void
 nsXMLContentSerializer::AppendNewLineToString(nsAString& aStr)
 {
+  if (!mPreLevel && mMayIgnoreLineBreakSequence) {
+    mMayIgnoreLineBreakSequence = PR_FALSE;
+    return;
+  }
   AppendToString(mLineBreak, aStr);
   mMayIgnoreLineBreakSequence = true;
   mColPos = 0;
@@ -1406,6 +1458,7 @@
       // Since we only saw linebreaks, but no spaces or tabs,
       // let's write a linebreak now.
       AppendNewLineToString(aOutputStr);
+      mMayIgnoreLineBreakSequence = PR_TRUE;
     }
   }
 }
@@ -1532,9 +1585,29 @@
             aOutputStr.Append(PRUnichar(' '));
             mAddSpace = false;
           }
+          bool CRDone = PR_FALSE;
+          if (wrapPosition) {
+            CRDone = (*(aSequenceStart + wrapPosition - 1) == '\n');
+          }
           aOutputStr.Append(aSequenceStart, wrapPosition);
 
-          AppendNewLineToString(aOutputStr);
+          if (CRDone) {
+            // we found a wrapping spot but there is a newline
+            // char right before that point... So we don't need another CR.
+            mMayIgnoreLineBreakSequence = PR_TRUE;
+            mColPos = 0;
+            mAddSpace = PR_FALSE;
+            mIsIndentationAddedOnCurrentLine = PR_FALSE;
+          }
+          else {
+            AppendNewLineToString(aOutputStr);
+          }
+
+          if (mDoFormat) {
+            AppendIndentation(aOutputStr);
+          }
+
+          mMayIgnoreLineBreakSequence = PR_TRUE;
           aPos = aSequenceStart + wrapPosition;
           aMayIgnoreStartOfLineWhitespaceSequence = true;
         }
diff -aur mozilla-release/content/xbl/src/nsXBLContentSink.cpp mozilla-release.new/content/xbl/src/nsXBLContentSink.cpp
--- mozilla-release/content/xbl/src/nsXBLContentSink.cpp	2013-05-11 21:19:25.000000000 +0200
+++ mozilla-release.new/content/xbl/src/nsXBLContentSink.cpp	2013-06-09 07:11:19.968228288 +0200
@@ -172,6 +172,8 @@
 nsXBLContentSink::ReportError(const PRUnichar* aErrorText, 
                               const PRUnichar* aSourceText,
                               nsIScriptError *aError,
+                              PRUint32 aLineNumber,
+                              PRUint32 aColNumber,
                               bool *_retval)
 {
   NS_PRECONDITION(aError && aSourceText && aErrorText, "Check arguments!!!");
@@ -197,6 +199,8 @@
   return nsXMLContentSink::ReportError(aErrorText, 
                                        aSourceText, 
                                        aError,
+                                       aLineNumber,
+                                       aColNumber,
                                        _retval);
 }
 
diff -aur mozilla-release/content/xbl/src/nsXBLContentSink.h mozilla-release.new/content/xbl/src/nsXBLContentSink.h
--- mozilla-release/content/xbl/src/nsXBLContentSink.h	2013-05-11 21:19:25.000000000 +0200
+++ mozilla-release.new/content/xbl/src/nsXBLContentSink.h	2013-06-09 07:12:22.416355806 +0200
@@ -120,6 +120,8 @@
   NS_IMETHOD ReportError(const PRUnichar* aErrorText,
                          const PRUnichar* aSourceText,
                          nsIScriptError *aError,
+                         PRUint32 aLineNumber,
+                         PRUint32 aColNumber,
                          bool *_retval);
 
 protected:
diff -aur mozilla-release/content/xml/document/src/nsXMLContentSink.cpp mozilla-release.new/content/xml/document/src/nsXMLContentSink.cpp
--- mozilla-release/content/xml/document/src/nsXMLContentSink.cpp	2013-05-11 21:19:25.000000000 +0200
+++ mozilla-release.new/content/xml/document/src/nsXMLContentSink.cpp	2013-06-09 07:15:29.514054594 +0200
@@ -1357,6 +1357,8 @@
 nsXMLContentSink::ReportError(const PRUnichar* aErrorText, 
                               const PRUnichar* aSourceText,
                               nsIScriptError *aError,
+                              PRUint32 aLineNumber,
+                              PRUint32 aColNumber,
                               bool *_retval)
 {
   NS_PRECONDITION(aError && aSourceText && aErrorText, "Check arguments!!!");
@@ -1408,7 +1410,15 @@
                                    NS_LITERAL_STRING("href=\"chrome://global/locale/intl.css\" type=\"text/css\"").get());
   NS_ENSURE_SUCCESS(rv, rv);
 
-  const PRUnichar* noAtts[] = { 0, 0 };
+  nsAutoString lineString, colString;
+  lineString.AppendInt(aLineNumber);
+  colString.AppendInt(aColNumber);
+  const PRUnichar* noAtts[] = { NS_LITERAL_STRING("line").get(),
+                                lineString.get(),
+                                NS_LITERAL_STRING("col").get(),
+                                colString.get(),
+                                0,
+                                0 };
 
   NS_NAMED_LITERAL_STRING(errorNs,
                           "http://www.mozilla.org/newlayout/xml/parsererror.xml");
@@ -1417,7 +1427,7 @@
   parsererror.Append((PRUnichar)0xFFFF);
   parsererror.AppendLiteral("parsererror");
   
-  rv = HandleStartElement(parsererror.get(), noAtts, 0, -1, (uint32_t)-1,
+  rv = HandleStartElement(parsererror.get(), noAtts, 2, -1, (PRUint32)-1,
                           false);
   NS_ENSURE_SUCCESS(rv, rv);
 
diff -aur mozilla-release/content/xslt/src/xslt/txMozillaStylesheetCompiler.cpp mozilla-release.new/content/xslt/src/xslt/txMozillaStylesheetCompiler.cpp
--- mozilla-release/content/xslt/src/xslt/txMozillaStylesheetCompiler.cpp	2013-05-11 21:19:25.000000000 +0200
+++ mozilla-release.new/content/xslt/src/xslt/txMozillaStylesheetCompiler.cpp	2013-06-09 07:17:05.082849233 +0200
@@ -203,6 +203,8 @@
 txStylesheetSink::ReportError(const PRUnichar *aErrorText,
                               const PRUnichar *aSourceText,
                               nsIScriptError *aError,
+                              PRUint32 aLineNumber,
+                              PRUint32 aColNumber,
                               bool *_retval)
 {
     NS_PRECONDITION(aError && aSourceText && aErrorText, "Check arguments!!!");
diff -aur mozilla-release/content/xul/document/src/nsXULContentSink.cpp mozilla-release.new/content/xul/document/src/nsXULContentSink.cpp
--- mozilla-release/content/xul/document/src/nsXULContentSink.cpp	2013-05-11 21:19:25.000000000 +0200
+++ mozilla-release.new/content/xul/document/src/nsXULContentSink.cpp	2013-06-09 07:18:26.724630636 +0200
@@ -657,6 +657,8 @@
 XULContentSinkImpl::ReportError(const PRUnichar* aErrorText, 
                                 const PRUnichar* aSourceText,
                                 nsIScriptError *aError,
+                                PRUint32 aLineNumber,
+                                PRUint32 aColNumber,
                                 bool *_retval)
 {
   NS_PRECONDITION(aError && aSourceText && aErrorText, "Check arguments!!!");
diff -aur mozilla-release/dom/base/nsFocusManager.cpp mozilla-release.new/dom/base/nsFocusManager.cpp
--- mozilla-release/dom/base/nsFocusManager.cpp	2013-05-11 21:19:26.000000000 +0200
+++ mozilla-release.new/dom/base/nsFocusManager.cpp	2013-06-09 07:23:28.981134767 +0200
@@ -2423,21 +2423,6 @@
     }
   }
   else {
-#ifdef MOZ_XUL
-    if (aType != MOVEFOCUS_CARET) {
-      // if there is no focus, yet a panel is open, focus the first item in
-      // the panel
-      nsXULPopupManager* pm = nsXULPopupManager::GetInstance();
-      if (pm)
-        popupFrame = pm->GetTopPopup(ePopupTypePanel);
-    }
-#endif
-    if (popupFrame) {
-      rootContent = popupFrame->GetContent();
-      NS_ASSERTION(rootContent, "Popup frame doesn't have a content node");
-      startContent = rootContent;
-    }
-    else {
       // Otherwise, for content shells, start from the location of the caret.
       int32_t itemType;
       docShell->GetItemType(&itemType);
@@ -2469,6 +2454,20 @@
           ignoreTabIndex = true;
         }
       }
+#ifdef MOZ_XUL
+    else {
+      // if there is no focus, yet a panel is open, focus the first item in
+      // the panel
+      nsXULPopupManager* pm = nsXULPopupManager::GetInstance();
+      if (pm)
+        popupFrame = pm->GetTopPopup(ePopupTypePanel);
+      if (popupFrame) {
+        rootContent = popupFrame->GetContent();
+        NS_ASSERTION(rootContent, "Popup frame doesn't have a content node");
+        startContent = rootContent;
+      }
+    }
+#endif
 
       if (!startContent) {
         // otherwise, just use the root content as the starting point
@@ -2476,7 +2475,6 @@
         NS_ENSURE_TRUE(startContent, NS_OK);
       }
     }
-  }
 
   NS_ASSERTION(startContent, "starting content not set");
 
diff -aur mozilla-release/dom/interfaces/core/nsIDOMDocument.idl mozilla-release.new/dom/interfaces/core/nsIDOMDocument.idl
--- mozilla-release/dom/interfaces/core/nsIDOMDocument.idl	2013-05-11 21:19:26.000000000 +0200
+++ mozilla-release.new/dom/interfaces/core/nsIDOMDocument.idl	2013-06-09 07:25:59.814463076 +0200
@@ -74,6 +74,9 @@
   nsIDOMNode         adoptNode(in nsIDOMNode source)
                                         raises(DOMException);
 
+  // BLUEGRIFFON
+  readonly attribute boolean hasXMLDeclaration;
+
   /**
    * Create a range
    *
diff -aur mozilla-release/editor/composer/src/nsComposerCommands.cpp mozilla-release.new/editor/composer/src/nsComposerCommands.cpp
--- mozilla-release/editor/composer/src/nsComposerCommands.cpp	2013-05-11 21:19:28.000000000 +0200
+++ mozilla-release.new/editor/composer/src/nsComposerCommands.cpp	2013-06-09 07:34:46.862466273 +0200
@@ -466,7 +466,15 @@
   nsresult rv = NS_OK;
   if (editor)
   {
+    bool isCssEnabled;
+    nsresult rv = editor->GetIsCSSEnabled(&isCssEnabled);
+    NS_ENSURE_SUCCESS(rv, rv);
+    rv = editor->SetIsCSSEnabled(true);
+    NS_ENSURE_SUCCESS(rv, rv);
+
     rv = editor->Indent(NS_LITERAL_STRING("indent"));
+    NS_ENSURE_SUCCESS(rv, rv);
+    rv = editor->SetIsCSSEnabled(isCssEnabled);
   }
   
   return rv;  
@@ -515,7 +523,17 @@
 {
   nsCOMPtr<nsIHTMLEditor> htmlEditor = do_QueryInterface(refCon);
   if (htmlEditor)
-    return htmlEditor->Indent(NS_LITERAL_STRING("outdent"));
+  {
+    bool isCssEnabled;
+    nsresult rv = htmlEditor->GetIsCSSEnabled(&isCssEnabled);
+    NS_ENSURE_SUCCESS(rv, rv);
+    rv = htmlEditor->SetIsCSSEnabled(true);
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    rv = htmlEditor->Indent(NS_LITERAL_STRING("outdent"));
+    NS_ENSURE_SUCCESS(rv, rv);
+    rv = htmlEditor->SetIsCSSEnabled(isCssEnabled);
+  }
   
   return NS_OK;  
 }
@@ -926,12 +944,20 @@
   nsCOMPtr<nsIHTMLEditor> htmlEditor = do_QueryInterface(aEditor);
   NS_ENSURE_TRUE(htmlEditor, NS_ERROR_FAILURE);
  
+  bool isCssEnabled;
+  nsresult rv = htmlEditor->GetIsCSSEnabled(&isCssEnabled);
+  NS_ENSURE_SUCCESS(rv, rv);
+  rv = htmlEditor->SetIsCSSEnabled(true);
+  NS_ENSURE_SUCCESS(rv, rv);
+
   nsIHTMLEditor::EAlignment firstAlign;
   bool outMixed;
-  nsresult rv = htmlEditor->GetAlignment(&outMixed, &firstAlign);
-  
+  rv = htmlEditor->GetAlignment(&outMixed, &firstAlign);
   NS_ENSURE_SUCCESS(rv, rv);
-  
+
+  rv = htmlEditor->SetIsCSSEnabled(isCssEnabled);
+  NS_ENSURE_SUCCESS(rv, rv);
+
   nsAutoString outStateString;
   switch (firstAlign)
   {
@@ -967,7 +993,14 @@
   nsCOMPtr<nsIHTMLEditor> htmlEditor = do_QueryInterface(aEditor);
   NS_ENSURE_TRUE(htmlEditor, NS_ERROR_FAILURE);
 
-  return htmlEditor->Align(newState);
+  bool isCssEnabled;
+  nsresult rv = htmlEditor->GetIsCSSEnabled(&isCssEnabled);
+  NS_ENSURE_SUCCESS(rv, rv);
+  rv = htmlEditor->SetIsCSSEnabled(true);
+  NS_ENSURE_SUCCESS(rv, rv);
+  rv = htmlEditor->Align(newState);
+  NS_ENSURE_SUCCESS(rv, rv);
+  return htmlEditor->SetIsCSSEnabled(isCssEnabled);
 }
 
 nsAbsolutePositioningCommand::nsAbsolutePositioningCommand()
diff -aur mozilla-release/editor/idl/nsIEditor.idl mozilla-release.new/editor/idl/nsIEditor.idl
--- mozilla-release/editor/idl/nsIEditor.idl	2013-05-11 21:19:28.000000000 +0200
+++ mozilla-release.new/editor/idl/nsIEditor.idl	2013-06-09 07:39:27.235062395 +0200
@@ -17,6 +17,7 @@
 interface nsITransactionManager;
 interface nsITransaction;
 interface nsIEditorObserver;
+interface nsIEditorMouseObserver;
 interface nsIEditActionListener;
 interface nsIInlineSpellChecker;
 interface nsITransferable;
@@ -517,6 +518,9 @@
   /** Remove an EditorObserver from the editor's list of observers. */
   void removeEditorObserver(in nsIEditorObserver observer);
 
+  void addEditorMouseObserver(in nsIEditorMouseObserver observer);
+  void removeEditorMouseObserver(in nsIEditorMouseObserver observer);
+
   /** add an EditActionListener to the editors list of listeners. */
   void addEditActionListener(in nsIEditActionListener listener);
 
Only in mozilla-release.new/editor/idl: nsIEditorMouseObserver.idl
diff -aur mozilla-release/editor/idl/nsIEditorObserver.idl mozilla-release.new/editor/idl/nsIEditorObserver.idl
--- mozilla-release/editor/idl/nsIEditorObserver.idl	2013-05-11 21:19:28.000000000 +0200
+++ mozilla-release.new/editor/idl/nsIEditorObserver.idl	2013-06-09 07:43:30.597290576 +0200
@@ -9,7 +9,7 @@
 Editor Observer interface to outside world
 */
 
-[scriptable, uuid(e52a09fd-d33a-4f85-be0a-fbd348f0fa27)]
+[scriptable, uuid(55908CF8-50F8-4159-B10D-81B1CD6CB25D)]
 
 /**
  * A generic editor observer interface. 
diff -aur mozilla-release/editor/libeditor/base/nsEditPropertyAtomList.h mozilla-release.new/editor/libeditor/base/nsEditPropertyAtomList.h
--- mozilla-release/editor/libeditor/base/nsEditPropertyAtomList.h	2013-05-11 21:19:28.000000000 +0200
+++ mozilla-release.new/editor/libeditor/base/nsEditPropertyAtomList.h	2013-06-09 07:46:01.860715116 +0200
@@ -123,6 +123,7 @@
 EDITOR_ATOM(mozEditorBogusNode, "_moz_editor_bogus_node")
 EDITOR_ATOM(name, "name")
 EDITOR_ATOM(nav, "nav")
+EDITOR_ATOM(nobr, "nobr")
 EDITOR_ATOM(noscript, "noscript")
 EDITOR_ATOM(object, "object")
 EDITOR_ATOM(ol, "ol")
diff -aur mozilla-release/editor/libeditor/base/nsEditor.cpp mozilla-release.new/editor/libeditor/base/nsEditor.cpp
--- mozilla-release/editor/libeditor/base/nsEditor.cpp	2013-05-11 21:19:28.000000000 +0200
+++ mozilla-release.new/editor/libeditor/base/nsEditor.cpp	2013-06-09 07:52:16.865657262 +0200
@@ -71,6 +71,7 @@
 #include "nsIDocumentStateListener.h"   // for nsIDocumentStateListener
 #include "nsIEditActionListener.h"      // for nsIEditActionListener
 #include "nsIEditorObserver.h"          // for nsIEditorObserver
+#include "nsIEditorMouseObserver.h"     // for nsIEditorMouseObserver
 #include "nsIEditorSpellCheck.h"        // for nsIEditorSpellCheck
 #include "nsIFrame.h"                   // for nsIFrame
 #include "nsIInlineSpellChecker.h"      // for nsIInlineSpellChecker, etc
@@ -172,6 +173,7 @@
  NS_IMPL_CYCLE_COLLECTION_UNLINK(mIMETextNode)
  NS_IMPL_CYCLE_COLLECTION_UNLINK(mActionListeners)
  NS_IMPL_CYCLE_COLLECTION_UNLINK(mEditorObservers)
+ NS_IMPL_CYCLE_COLLECTION_UNLINK(mEditorMouseObservers)
  NS_IMPL_CYCLE_COLLECTION_UNLINK(mDocStateListeners)
  NS_IMPL_CYCLE_COLLECTION_UNLINK(mEventTarget)
  NS_IMPL_CYCLE_COLLECTION_UNLINK(mEventListener)
@@ -191,6 +193,7 @@
  NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mIMETextNode)
  NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mActionListeners)
  NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mEditorObservers)
+ NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mEditorMouseObservers)
  NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mDocStateListeners)
  NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mEventTarget)
  NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mEventListener)
@@ -441,6 +444,7 @@
   RemoveEventListeners();
   mActionListeners.Clear();
   mEditorObservers.Clear();
+  mEditorMouseObservers.Clear();
   mDocStateListeners.Clear();
   mInlineSpellChecker = nullptr;
   mSpellcheckCheckboxState = eTriUnset;
@@ -1808,6 +1812,36 @@
   return NS_OK;
 }
 
+NS_IMETHODIMP
+nsEditor::AddEditorMouseObserver(nsIEditorMouseObserver *aObserver)
+{
+  // we don't keep ownership of the observers.  They must
+  // remove themselves as observers before they are destroyed.
+
+  NS_ENSURE_TRUE(aObserver, NS_ERROR_NULL_POINTER);
+
+  // Make sure the listener isn't already on the list
+  if (mEditorMouseObservers.IndexOf(aObserver) == -1)
+  {
+    if (!mEditorMouseObservers.AppendObject(aObserver))
+      return NS_ERROR_FAILURE;
+  }
+
+  return NS_OK;
+}
+
+
+NS_IMETHODIMP
+nsEditor::RemoveEditorMouseObserver(nsIEditorMouseObserver *aObserver)
+{
+  NS_ENSURE_TRUE(aObserver, NS_ERROR_FAILURE);
+
+  if (!mEditorMouseObservers.RemoveObject(aObserver))
+    return NS_ERROR_FAILURE;
+
+  return NS_OK;
+}
+
 class EditorInputEventDispatcher : public nsRunnable
 {
 public:
@@ -1870,6 +1904,26 @@
     new EditorInputEventDispatcher(this, target));
 }
 
+bool nsEditor::NotifyEditorMouseObservers(MouseEventType aMouseEventType,
+                                          int32_t aClientX,
+                                          int32_t aClientY,
+                                          nsIDOMNode* aTarget,
+                                          bool aIsShiftKey)
+{
+  bool rv = false;
+  for (int32_t i = 0; i < mEditorMouseObservers.Count(); i++) {
+    bool oneRv = false;
+    switch (aMouseEventType) {
+    case nsEditor::kMouseDown: mEditorMouseObservers[i]->MouseDown(aClientX, aClientY, aTarget, aIsShiftKey, &rv); break;
+    case nsEditor::kMouseUp:   mEditorMouseObservers[i]->MouseUp(aClientX, aClientY, aTarget, aIsShiftKey, &rv); break;
+    case nsEditor::kMouseMove: mEditorMouseObservers[i]->MouseMove(aClientX, aClientY, aTarget, aIsShiftKey, &rv); break;
+    }
+    rv |= oneRv;
+  }
+
+  return rv;
+}
+
 NS_IMETHODIMP
 nsEditor::AddEditActionListener(nsIEditActionListener *aListener)
 {
diff -aur mozilla-release/editor/libeditor/base/nsEditor.h mozilla-release.new/editor/libeditor/base/nsEditor.h
--- mozilla-release/editor/libeditor/base/nsEditor.h	2013-05-11 21:19:28.000000000 +0200
+++ mozilla-release.new/editor/libeditor/base/nsEditor.h	2013-06-09 07:55:24.296603697 +0200
@@ -55,6 +55,7 @@
 class nsIDocumentStateListener;
 class nsIEditActionListener;
 class nsIEditorObserver;
+class nsIEditorMouseObserver;
 class nsIInlineSpellChecker;
 class nsINode;
 class nsIPresShell;
@@ -151,6 +152,13 @@
     kIterBackward
   };
 
+  enum MouseEventType
+  {
+    kMouseDown,
+    kMouseUp,
+    kMouseMove
+  };
+
   /** The default constructor. This should suffice. the setting of the interfaces is done
    *  after the construction of the editor class.
    */
@@ -171,6 +179,11 @@
   already_AddRefed<nsIDocument> GetDocument();
   already_AddRefed<nsIPresShell> GetPresShell();
   void NotifyEditorObservers();
+  bool NotifyEditorMouseObservers(MouseEventType aMouseEventType,
+                                  int32_t aClientX,
+                                  int32_t aClientY,
+                                  nsIDOMNode* aTarget,
+                                  bool aIsShiftKey);
 
   /* ------------ nsIEditor methods -------------- */
   NS_DECL_NSIEDITOR
@@ -819,6 +832,7 @@
   // various listeners
   nsCOMArray<nsIEditActionListener> mActionListeners;  // listens to all low level actions on the doc
   nsCOMArray<nsIEditorObserver> mEditorObservers;  // just notify once per high level change
+  nsCOMArray<nsIEditorMouseObserver> mEditorMouseObservers;  // just notify once per high level change
   nsCOMArray<nsIDocumentStateListener> mDocStateListeners;// listen to overall doc state (dirty or not, just created, etc)
 
   nsSelectionState  mSavedSel;           // cached selection for nsAutoSelectionReset
diff -aur mozilla-release/editor/libeditor/base/nsEditorEventListener.cpp mozilla-release.new/editor/libeditor/base/nsEditorEventListener.cpp
--- mozilla-release/editor/libeditor/base/nsEditorEventListener.cpp	2013-05-11 21:19:28.000000000 +0200
+++ mozilla-release.new/editor/libeditor/base/nsEditorEventListener.cpp	2013-06-09 07:59:50.379340249 +0200
@@ -146,6 +146,9 @@
                                NS_LITERAL_STRING("mouseup"),
                                dom::TrustedEventsAtCapture());
   elmP->AddEventListenerByType(this,
+                               NS_LITERAL_STRING("mousemove"),
+                               dom::TrustedEventsAtCapture());
+  elmP->AddEventListenerByType(this,
                                NS_LITERAL_STRING("click"),
                                dom::TrustedEventsAtCapture());
 // Focus event doesn't bubble so adding the listener to capturing phase.
@@ -223,6 +226,9 @@
                                   NS_LITERAL_STRING("mouseup"),
                                   dom::TrustedEventsAtCapture());
   elmP->RemoveEventListenerByType(this,
+                                  NS_LITERAL_STRING("mousemove"),
+                                  dom::TrustedEventsAtCapture());
+  elmP->RemoveEventListenerByType(this,
                                   NS_LITERAL_STRING("click"),
                                   dom::TrustedEventsAtCapture());
   elmP->RemoveEventListenerByType(this,
@@ -293,6 +299,8 @@
     return MouseDown(aEvent);
   if (eventType.EqualsLiteral("mouseup"))
     return MouseUp(aEvent);
+  if (eventType.EqualsLiteral("mousemove"))
+    return MouseMove(aEvent);
   if (eventType.EqualsLiteral("click"))
     return MouseClick(aEvent);
   if (eventType.EqualsLiteral("focus"))
diff -aur mozilla-release/editor/libeditor/base/nsEditorEventListener.h mozilla-release.new/editor/libeditor/base/nsEditorEventListener.h
--- mozilla-release/editor/libeditor/base/nsEditorEventListener.h	2013-05-11 21:19:28.000000000 +0200
+++ mozilla-release.new/editor/libeditor/base/nsEditorEventListener.h	2013-06-09 08:01:07.311063429 +0200
@@ -53,6 +53,7 @@
   void       HandleEndComposition(nsIDOMEvent* aCompositionEvent);
   NS_IMETHOD MouseDown(nsIDOMEvent* aMouseEvent);
   NS_IMETHOD MouseUp(nsIDOMEvent* aMouseEvent) { return NS_OK; }
+  NS_IMETHOD MouseMove(nsIDOMEvent* aMouseEvent) { return NS_OK; }
   NS_IMETHOD MouseClick(nsIDOMEvent* aMouseEvent);
   NS_IMETHOD Focus(nsIDOMEvent* aEvent);
   NS_IMETHOD Blur(nsIDOMEvent* aEvent);
diff -aur mozilla-release/editor/libeditor/html/nsHTMLCSSUtils.cpp mozilla-release.new/editor/libeditor/html/nsHTMLCSSUtils.cpp
--- mozilla-release/editor/libeditor/html/nsHTMLCSSUtils.cpp	2013-05-11 21:19:28.000000000 +0200
+++ mozilla-release.new/editor/libeditor/html/nsHTMLCSSUtils.cpp	2013-06-09 08:03:44.041261751 +0200
@@ -335,6 +335,7 @@
       || nsEditProperty::tt == aProperty
       || nsEditProperty::u == aProperty
       || nsEditProperty::strike == aProperty
+      || nsEditProperty::nobr == aProperty
       || ((nsEditProperty::font == aProperty) && aAttribute &&
            (aAttribute->EqualsLiteral("color") ||
             aAttribute->EqualsLiteral("face")))) {
@@ -843,6 +844,8 @@
     equivTable = underlineEquivTable;
   } else if (nsEditProperty::strike == aHTMLProperty) {
     equivTable = strikeEquivTable;
+  } else if (nsEditProperty::nobr == aHTMLProperty) {
+    equivTable = nowrapEquivTable;
   } else if (nsEditProperty::tt == aHTMLProperty) {
     equivTable = ttEquivTable;
   } else if (aAttribute) {
diff -aur mozilla-release/editor/libeditor/html/nsHTMLDataTransfer.cpp mozilla-release.new/editor/libeditor/html/nsHTMLDataTransfer.cpp
--- mozilla-release/editor/libeditor/html/nsHTMLDataTransfer.cpp	2013-05-11 21:19:28.000000000 +0200
+++ mozilla-release.new/editor/libeditor/html/nsHTMLDataTransfer.cpp	2013-06-09 08:06:30.141655054 +0200
@@ -1333,14 +1333,43 @@
       }
 
       if (!stuffToPaste.IsEmpty()) {
+
+        // Find where the <body> tag starts.
+        nsReadingIterator<PRUnichar> beginbody;
+        nsReadingIterator<PRUnichar> endbody;
+        stuffToPaste.BeginReading(beginbody);
+        stuffToPaste.EndReading(endbody);
+        bool foundbody = CaseInsensitiveFindInReadable(NS_LITERAL_STRING("<body"),
+                                                         beginbody, endbody);
+        nsAutoString realStuffToPaste;
+        if (foundbody) {
+          nsReadingIterator<PRUnichar> endstartbody;
+          stuffToPaste.EndReading(endstartbody);
+          bool foundstartbody = CaseInsensitiveFindInReadable(NS_LITERAL_STRING(">"),
+                                                              endbody, endstartbody);
+          if (!foundstartbody)
+            return NS_ERROR_FAILURE;
+
+          nsReadingIterator<PRUnichar> beginclosebody;
+          nsReadingIterator<PRUnichar> endclosebody;
+          stuffToPaste.BeginReading(beginclosebody);
+          stuffToPaste.EndReading(endclosebody);
+
+          // Find the index before "</body>"
+          bool foundclosehead = CaseInsensitiveFindInReadable(
+                   NS_LITERAL_STRING("</body>"), beginclosebody, endclosebody);
+          realStuffToPaste.Assign(Substring(endstartbody, beginclosebody));
+        }
+        else
+          realStuffToPaste.Assign(stuffToPaste);
         nsAutoEditBatch beginBatching(this);
         if (0 == nsCRT::strcmp(bestFlavor, kHTMLMime)) {
-          rv = DoInsertHTMLWithContext(stuffToPaste,
+          rv = DoInsertHTMLWithContext(realStuffToPaste,
                                        aContextStr, aInfoStr, flavor,
                                        aSourceDoc,
                                        aDestinationNode, aDestOffset,
                                        aDoDeleteSelection,
-                                       isSafe);
+                                       true);
         } else {
           rv = InsertTextAt(stuffToPaste, aDestinationNode, aDestOffset, aDoDeleteSelection);
         }
diff -aur mozilla-release/editor/libeditor/html/nsHTMLEditRules.cpp mozilla-release.new/editor/libeditor/html/nsHTMLEditRules.cpp
--- mozilla-release/editor/libeditor/html/nsHTMLEditRules.cpp	2013-05-11 21:19:28.000000000 +0200
+++ mozilla-release.new/editor/libeditor/html/nsHTMLEditRules.cpp	2013-06-09 08:14:15.395329910 +0200
@@ -1350,39 +1350,8 @@
     // it is to search for both tabs and newlines.
     if (isPRE || IsPlaintextEditor())
     {
-      while (unicodeBuf && (pos != -1) && (pos < (int32_t)(*inString).Length()))
-      {
-        int32_t oldPos = pos;
-        int32_t subStrLen;
-        pos = tString.FindChar(nsCRT::LF, oldPos);
-
-        if (pos != -1) 
-        {
-          subStrLen = pos - oldPos;
-          // if first char is newline, then use just it
-          if (subStrLen == 0)
-            subStrLen = 1;
-        }
-        else
-        {
-          subStrLen = tString.Length() - oldPos;
-          pos = tString.Length();
-        }
-
-        nsDependentSubstring subStr(tString, oldPos, subStrLen);
-        
-        // is it a return?
-        if (subStr.Equals(newlineStr))
-        {
-          res = mHTMLEditor->CreateBRImpl(address_of(curNode), &curOffset, address_of(unused), nsIEditor::eNone);
-          pos++;
-        }
-        else
-        {
-          res = mHTMLEditor->InsertTextImpl(subStr, address_of(curNode), &curOffset, doc);
-        }
-        NS_ENSURE_SUCCESS(res, res);
-      }
+      res = mHTMLEditor->InsertTextImpl(tString, address_of(curNode), &curOffset, doc);
+      NS_ENSURE_SUCCESS(res, res);
     }
     else
     {
@@ -4398,7 +4367,7 @@
 
     while (item) {
       res = mHTMLEditor->SetInlinePropertyOnNode(node, item->tag, &item->attr,
-                                                 &item->value);
+                                                 &item->value, false);
       NS_ENSURE_SUCCESS(res, res);
       item = mHTMLEditor->mTypeInState->TakeSetProperty();
     }
@@ -6543,6 +6512,9 @@
       res = mHTMLEditor->DeleteNode(aListItem);
       NS_ENSURE_SUCCESS(res, res);
 
+      ClearCachedStyles();
+      mHTMLEditor->mTypeInState->ClearAllProps();
+
       // time to insert a paragraph
       NS_NAMED_LITERAL_STRING(pType, "p");
       nsCOMPtr<nsIDOMNode> pNode;
diff -aur mozilla-release/editor/libeditor/html/nsHTMLEditUtils.cpp mozilla-release.new/editor/libeditor/html/nsHTMLEditUtils.cpp
--- mozilla-release/editor/libeditor/html/nsHTMLEditUtils.cpp	2013-05-11 21:19:28.000000000 +0200
+++ mozilla-release.new/editor/libeditor/html/nsHTMLEditUtils.cpp	2013-06-09 08:15:50.114096706 +0200
@@ -707,7 +707,7 @@
   ELEM(meter, true, false, GROUP_SPECIAL, GROUP_FLOW_ELEMENT),
   ELEM(multicol, false, false, GROUP_NONE, GROUP_NONE),
   ELEM(nav, true, true, GROUP_BLOCK, GROUP_FLOW_ELEMENT),
-  ELEM(nobr, false, false, GROUP_NONE, GROUP_NONE),
+  ELEM(nobr, false, false, GROUP_PHRASE, GROUP_INLINE_ELEMENT),
   ELEM(noembed, false, false, GROUP_NONE, GROUP_NONE),
   ELEM(noframes, true, true, GROUP_BLOCK, GROUP_FLOW_ELEMENT),
   ELEM(noscript, true, true, GROUP_BLOCK, GROUP_FLOW_ELEMENT),
diff -aur mozilla-release/editor/libeditor/html/nsHTMLEditor.cpp mozilla-release.new/editor/libeditor/html/nsHTMLEditor.cpp
--- mozilla-release/editor/libeditor/html/nsHTMLEditor.cpp	2013-05-11 21:19:28.000000000 +0200
+++ mozilla-release.new/editor/libeditor/html/nsHTMLEditor.cpp	2013-06-09 08:24:46.092501520 +0200
@@ -268,7 +268,8 @@
 
     if (!IsInteractionAllowed()) {
       // ignore any errors from this in case the file is missing
-      AddOverrideStyleSheet(NS_LITERAL_STRING("resource://gre/res/EditorOverride.css"));
+      // BlueGriffon uses its own EditorOverride.css
+      //AddOverrideStyleSheet(NS_LITERAL_STRING("resource://gre/res/EditorOverride.css"));
     }
 
     nsCOMPtr<nsISelection>selection;
@@ -1783,7 +1784,8 @@
   if (selection->Collapsed() || IsTextNode(parent)) {
     // we want to look at the parent and ancestors
     nodeToExamine = parent;
-  } else {
+  }
+  else {
     // otherwise we want to look at the first editable node after
     // {parent,offset} and its ancestors for divs with alignment on them
     nodeToExamine = GetChildAt(parent, offset);
@@ -2623,11 +2625,8 @@
     res = newElement->SetAttribute(NS_LITERAL_STRING("cellspacing"),NS_LITERAL_STRING("2"));
     NS_ENSURE_SUCCESS(res, res);
     res = newElement->SetAttribute(NS_LITERAL_STRING("border"),NS_LITERAL_STRING("1"));
-  } else if (TagName.EqualsLiteral("td"))
-  {
-    res = SetAttributeOrEquivalent(newElement, NS_LITERAL_STRING("valign"),
-                                   NS_LITERAL_STRING("top"), true);
   }
+
   // ADD OTHER TAGS HERE
 
   if (NS_SUCCEEDED(res))
@@ -5430,8 +5429,16 @@
     // If we're dealing with an element, then ask it whether it's editable.
     return aNode->IsEditable();
   }
-  // We might be dealing with a text node for example, which we always consider
-  // to be editable.
+  // We might be dealing with a text node for example, which we consider
+  // to be editable if it's a significant text node
+  /*
+  if (IsTextNode(aNode)) {
+    nsCOMPtr<nsIContent> content = do_QueryInterface(aNode);
+    bool isEmptyTextNode = false;
+    IsVisTextNode(content, &isEmptyTextNode, true);
+    return !isEmptyTextNode;
+  }
+  */
   return true;
 }
 
diff -aur mozilla-release/editor/libeditor/html/nsHTMLEditor.h mozilla-release.new/editor/libeditor/html/nsHTMLEditor.h
--- mozilla-release/editor/libeditor/html/nsHTMLEditor.h	2013-05-11 21:19:28.000000000 +0200
+++ mozilla-release.new/editor/libeditor/html/nsHTMLEditor.h	2013-06-09 08:27:57.356654903 +0200
@@ -644,11 +644,13 @@
   nsresult SetInlinePropertyOnNode( nsIDOMNode *aNode,
                                     nsIAtom *aProperty, 
                                     const nsAString *aAttribute,
-                                    const nsAString *aValue);
+                                    const nsAString *aValue,
+                                    bool aAvoidNestingForCSS);
   nsresult SetInlinePropertyOnNode(nsIContent* aNode,
                                    nsIAtom* aProperty,
                                    const nsAString* aAttribute,
-                                   const nsAString* aValue);
+                                   const nsAString* aValue,
+                                   bool aAvoidNestingForCSS);
 
   nsresult PromoteInlineRange(nsIDOMRange *inRange);
   nsresult PromoteRangeIfStartsOrEndsInNamedAnchor(nsIDOMRange *inRange);
@@ -950,7 +952,8 @@
   nsresult SetInlinePropertyOnNodeImpl(nsIContent* aNode,
                                        nsIAtom* aProperty,
                                        const nsAString* aAttribute,
-                                       const nsAString* aValue);
+                                       const nsAString* aValue,
+                                       bool aAvoidNestingForCSS);
 
 };
 #endif //nsHTMLEditor_h__
diff -aur mozilla-release/editor/libeditor/html/nsHTMLEditorEventListener.cpp mozilla-release.new/editor/libeditor/html/nsHTMLEditorEventListener.cpp
--- mozilla-release/editor/libeditor/html/nsHTMLEditorEventListener.cpp	2013-05-11 21:19:28.000000000 +0200
+++ mozilla-release.new/editor/libeditor/html/nsHTMLEditorEventListener.cpp	2013-06-09 08:32:53.356397489 +0200
@@ -72,10 +72,56 @@
   mouseEvent->GetClientY(&clientY);
   htmlEditor->MouseUp(clientX, clientY, element);
 
+  bool isShiftKey;
+  res = mouseEvent->GetShiftKey(&isShiftKey);
+  NS_ENSURE_SUCCESS(res, res);
+  if (htmlEditor->NotifyEditorMouseObservers(nsEditor::kMouseUp,
+                                             clientX, clientY,
+                                             element, isShiftKey)) {
+    aMouseEvent->PreventDefault();
+    return NS_OK;
+  }
+
   return nsEditorEventListener::MouseUp(aMouseEvent);
 }
 
 NS_IMETHODIMP
+nsHTMLEditorEventListener::MouseMove(nsIDOMEvent* aMouseEvent)
+{
+  NS_ENSURE_TRUE(mEditor, NS_ERROR_NOT_AVAILABLE);
+
+  nsCOMPtr<nsIDOMMouseEvent> mouseEvent ( do_QueryInterface(aMouseEvent) );
+  if (!mouseEvent) {
+    //non-ui event passed in.  bad things.
+    return NS_OK;
+  }
+
+  nsHTMLEditor* htmlEditor = GetHTMLEditor();
+
+  nsCOMPtr<nsIDOMEventTarget> target;
+  nsresult res = aMouseEvent->GetExplicitOriginalTarget(getter_AddRefs(target));
+  NS_ENSURE_SUCCESS(res, res);
+  NS_ENSURE_TRUE(target, NS_ERROR_NULL_POINTER);
+  nsCOMPtr<nsIDOMElement> element = do_QueryInterface(target);
+
+  int32_t clientX, clientY;
+  mouseEvent->GetClientX(&clientX);
+  mouseEvent->GetClientY(&clientY);
+
+  bool isShiftKey;
+  res = mouseEvent->GetShiftKey(&isShiftKey);
+  NS_ENSURE_SUCCESS(res, res);
+  if (htmlEditor->NotifyEditorMouseObservers(nsEditor::kMouseMove,
+                                             clientX, clientY,
+                                             element, isShiftKey)) {
+    aMouseEvent->PreventDefault();
+    return NS_OK;
+  }
+
+  return nsEditorEventListener::MouseMove(aMouseEvent);
+}
+
+NS_IMETHODIMP
 nsHTMLEditorEventListener::MouseDown(nsIDOMEvent* aMouseEvent)
 {
   NS_ENSURE_TRUE(mEditor, NS_ERROR_NOT_AVAILABLE);
@@ -112,6 +158,10 @@
     return NS_OK;
   }
 
+  int32_t clientX, clientY;
+  mouseEvent->GetClientX(&clientX);
+  mouseEvent->GetClientY(&clientY);
+
   if (isContextClick || (buttonNumber == 0 && clickCount == 2))
   {
     nsCOMPtr<nsISelection> selection;
@@ -213,12 +263,20 @@
   else if (!isContextClick && buttonNumber == 0 && clickCount == 1)
   {
     // if the target element is an image, we have to display resizers
-    int32_t clientX, clientY;
-    mouseEvent->GetClientX(&clientX);
-    mouseEvent->GetClientY(&clientY);
     htmlEditor->MouseDown(clientX, clientY, element, aMouseEvent);
   }
 
+  nsCOMPtr<nsIDOMNode> targetNode = do_QueryInterface(target);
+  bool isShiftKey;
+  res = mouseEvent->GetShiftKey(&isShiftKey);
+  NS_ENSURE_SUCCESS(res, res);
+  if (htmlEditor->NotifyEditorMouseObservers(nsEditor::kMouseDown,
+                                             clientX, clientY,
+                                             element, isShiftKey)) {
+    aMouseEvent->PreventDefault();
+    return NS_OK;
+  }
+
   return nsEditorEventListener::MouseDown(aMouseEvent);
 }
 
diff -aur mozilla-release/editor/libeditor/html/nsHTMLEditorEventListener.h mozilla-release.new/editor/libeditor/html/nsHTMLEditorEventListener.h
--- mozilla-release/editor/libeditor/html/nsHTMLEditorEventListener.h	2013-05-11 21:19:28.000000000 +0200
+++ mozilla-release.new/editor/libeditor/html/nsHTMLEditorEventListener.h	2013-06-09 08:34:24.785040779 +0200
@@ -33,6 +33,7 @@
   NS_IMETHOD MouseDown(nsIDOMEvent* aMouseEvent);
   NS_IMETHOD MouseUp(nsIDOMEvent* aMouseEvent);
   NS_IMETHOD MouseClick(nsIDOMEvent* aMouseEvent);
+  NS_IMETHOD MouseMove(nsIDOMEvent* aMouseEvent);
 
 protected:
   inline nsHTMLEditor* GetHTMLEditor();
diff -aur mozilla-release/editor/libeditor/html/nsHTMLEditorStyle.cpp mozilla-release.new/editor/libeditor/html/nsHTMLEditorStyle.cpp
--- mozilla-release/editor/libeditor/html/nsHTMLEditorStyle.cpp	2013-05-11 21:19:28.000000000 +0200
+++ mozilla-release.new/editor/libeditor/html/nsHTMLEditorStyle.cpp	2013-06-09 08:46:37.697658110 +0200
@@ -223,7 +223,7 @@
       int32_t j;
       for (j = 0; j < listCount; j++) {
         res = SetInlinePropertyOnNode(arrayOfNodes[j], aProperty,
-                                      &aAttribute, &aValue);
+                                      &aAttribute, &aValue, (1 == listCount));
         NS_ENSURE_SUCCESS(res, res);
       }
 
@@ -266,14 +266,17 @@
     return false;
   }
 
+  uint32_t attrCount = aContent->GetAttrCount();
+  bool noAttr = !attrCount
+                || (attrCount == 1 && aContent->GetAttrNameAt(0)->Equals(nsGkAtoms::mozdirty));
   // First check for <b>, <i>, etc.
-  if (element->IsHTML(aProperty) && !element->GetAttrCount() &&
+  if (element->IsHTML(aProperty) && noAttr &&
       (!aAttribute || aAttribute->IsEmpty())) {
     return true;
   }
 
   // Special cases for various equivalencies: <strong>, <em>, <s>
-  if (!element->GetAttrCount() &&
+  if (noAttr &&
       ((aProperty == nsGkAtoms::b && element->IsHTML(nsGkAtoms::strong)) ||
        (aProperty == nsGkAtoms::i && element->IsHTML(nsGkAtoms::em)) ||
        (aProperty == nsGkAtoms::strike && element->IsHTML(nsGkAtoms::s)))) {
@@ -300,7 +303,9 @@
   // attribute that sets only the style we're looking for, if this type of
   // style supports it
   if (!mHTMLCSSUtils->IsCSSEditableProperty(element, aProperty, aAttribute) ||
-      !element->IsHTML(nsGkAtoms::span) || element->GetAttrCount() != 1 ||
+      !element->IsHTML(nsGkAtoms::span) ||
+      !(attrCount == 1 || (attrCount == 2 && (element->GetAttrNameAt(0)->Equals(nsGkAtoms::mozdirty) ||
+                                              element->GetAttrNameAt(1)->Equals(nsGkAtoms::mozdirty)))) ||
       !element->HasAttr(kNameSpaceID_None, nsGkAtoms::style)) {
     return false;
   }
@@ -397,7 +402,7 @@
   }
   
   // reparent the node inside inline node with appropriate {attribute,value}
-  return SetInlinePropertyOnNode(node, aProperty, aAttribute, aValue);
+  return SetInlinePropertyOnNode(node, aProperty, aAttribute, aValue, false);
 }
 
 
@@ -405,7 +410,8 @@
 nsHTMLEditor::SetInlinePropertyOnNodeImpl(nsIContent* aNode,
                                           nsIAtom* aProperty,
                                           const nsAString* aAttribute,
-                                          const nsAString* aValue)
+                                          const nsAString* aValue,
+                                          bool aAvoidNestingForCSS)
 {
   MOZ_ASSERT(aNode && aProperty);
   MOZ_ASSERT(aValue);
@@ -429,7 +435,7 @@
       int32_t listCount = arrayOfNodes.Count();
       for (int32_t j = 0; j < listCount; ++j) {
         nsresult rv = SetInlinePropertyOnNode(arrayOfNodes[j], aProperty,
-                                              aAttribute, aValue);
+                                              aAttribute, aValue, false);
         NS_ENSURE_SUCCESS(rv, rv);
       }
     }
@@ -475,8 +481,9 @@
     nsCOMPtr<dom::Element> tmp;
     // We only add style="" to <span>s with no attributes (bug 746515).  If we
     // don't have one, we need to make one.
-    if (aNode->IsElement() && aNode->AsElement()->IsHTML(nsGkAtoms::span) &&
-        !aNode->AsElement()->GetAttrCount()) {
+    if (aNode->IsElement() &&
+        (aAvoidNestingForCSS ||
+         (aNode->AsElement()->IsHTML(nsGkAtoms::span) && !aNode->AsElement()->GetAttrCount()))) {
       tmp = aNode->AsElement();
     } else {
       res = InsertContainerAbove(aNode, getter_AddRefs(tmp),
@@ -515,7 +522,8 @@
 nsHTMLEditor::SetInlinePropertyOnNode(nsIDOMNode *aNode,
                                       nsIAtom *aProperty,
                                       const nsAString *aAttribute,
-                                      const nsAString *aValue)
+                                      const nsAString *aValue,
+                                      bool aAvoidNestingForCSS)
 {
   // Before setting the property, we remove it if it's already set.
   // RemoveStyleInside might remove the node we're looking at or some of its
@@ -527,14 +535,15 @@
   nsCOMPtr<nsIContent> node = do_QueryInterface(aNode);
   NS_ENSURE_STATE(node);
 
-  return SetInlinePropertyOnNode(node, aProperty, aAttribute, aValue);
+  return SetInlinePropertyOnNode(node, aProperty, aAttribute, aValue, aAvoidNestingForCSS);
 }
 
 nsresult
 nsHTMLEditor::SetInlinePropertyOnNode(nsIContent* aNode,
                                       nsIAtom* aProperty,
                                       const nsAString* aAttribute,
-                                      const nsAString* aValue)
+                                      const nsAString* aValue,
+                                      bool aAvoidNestingForCSS)
 {
   MOZ_ASSERT(aNode);
   MOZ_ASSERT(aProperty);
@@ -550,7 +559,7 @@
   if (aNode->GetParentNode()) {
     // The node is still where it was
     return SetInlinePropertyOnNodeImpl(aNode, aProperty,
-                                       aAttribute, aValue);
+                                       aAttribute, aValue, aAvoidNestingForCSS);
   }
 
   // It's vanished.  Use the old siblings for reference to construct a
@@ -573,7 +582,7 @@
   int32_t nodesToSetCount = nodesToSet.Count();
   for (int32_t k = 0; k < nodesToSetCount; k++) {
     res = SetInlinePropertyOnNodeImpl(nodesToSet[k], aProperty,
-                                      aAttribute, aValue);
+                                      aAttribute, aValue, false);
     NS_ENSURE_SUCCESS(res, res);
   }
 
@@ -1460,7 +1469,7 @@
               // insert a span "inverting" the style
               if (mHTMLCSSUtils->IsCSSInvertable(aProperty, aAttribute)) {
                 nsAutoString value; value.AssignLiteral("-moz-editor-invert-value");
-                SetInlinePropertyOnNode(node, aProperty, aAttribute, &value);
+                SetInlinePropertyOnNode(node, aProperty, aAttribute, &value, false);
               }
             }
           }
diff -aur mozilla-release/editor/libeditor/html/nsTableEditor.cpp mozilla-release.new/editor/libeditor/html/nsTableEditor.cpp
--- mozilla-release/editor/libeditor/html/nsTableEditor.cpp	2013-05-11 21:19:29.000000000 +0200
+++ mozilla-release.new/editor/libeditor/html/nsTableEditor.cpp	2013-06-09 08:52:55.379381900 +0200
@@ -19,6 +19,7 @@
 #include "nsGkAtoms.h"
 #include "nsHTMLEditUtils.h"
 #include "nsHTMLEditor.h"
+#include "nsTextEditUtils.h"
 #include "nsIAtom.h"
 #include "nsIContent.h"
 #include "nsIDOMElement.h"
@@ -2340,6 +2341,7 @@
   nsAutoRules beginRulesSniffing(this, EditAction::deleteNode, nsIEditor::eNext);
 
   // Don't need to merge if cell is empty
+  nsresult res;
   if (!IsEmptyCell(cellToMerge)) {
     // Get index of last child in target cell
     // If we fail or don't have children, 
@@ -2348,20 +2350,68 @@
 
     // Start inserting just after last child
     uint32_t len = targetCell->GetChildCount();
-    if (len == 1 && IsEmptyCell(targetCell)) {
+    bool isTargetCellEmpty = IsEmptyCell(targetCell);
+    if (len == 1 && isTargetCellEmpty) {
       // Delete the empty node
       nsIContent* cellChild = targetCell->GetFirstChild();
       nsresult res = DeleteNode(cellChild->AsDOMNode());
       NS_ENSURE_SUCCESS(res, res);
       insertIndex = 0;
-    } else {
+    }
+    else {
       insertIndex = (int32_t)len;
+      // Insert a break at the beginning of source cell if we need it.
+      // We need it if both cells are non-empty from a content point of view.
+      if (!isTargetCellEmpty) {
+        // Let's look for the last child of the target cell that is not
+        // an empty text node
+        nsIContent* targetCellChild = targetCell->GetLastChild();
+        nsCOMPtr<nsIDOMNode> targetCellChildNode = targetCellChild->AsDOMNode();
+        bool isEmptyTextNode = false;
+        while (targetCellChildNode
+               && nsEditor::IsTextNode(targetCellChildNode)
+              && (NS_SUCCEEDED(IsEmptyNode(targetCellChildNode, &isEmptyTextNode)) && isEmptyTextNode)) {
+          res = targetCellChildNode->GetPreviousSibling(getter_AddRefs(targetCellChildNode));
+          NS_ENSURE_SUCCESS(res, res);
+        }
+        // we know targetCellChildNode cannot be null at this point because
+        // we tested isTargetCellEmpty above...
+        bool isBlock = false;
+        NodeIsBlock(targetCellChildNode, &isBlock);
+        // Lets check if targetCellChildNode is a block or a break
+        if (!isBlock && !nsTextEditUtils::IsBreak(targetCellChildNode)) {
+          // It's not, we may have to insert a break...
+          // Let's look for the first child of the source cell that is not
+          // an empty text node
+          nsCOMPtr<nsIDOMNode> cellChildNode = cellToMerge->GetFirstChild()->AsDOMNode();
+          while (cellChildNode
+                 && nsEditor::IsTextNode(cellChildNode)
+                 && (NS_SUCCEEDED(IsEmptyNode(cellChildNode, &isEmptyTextNode)) && isEmptyTextNode)) {
+            res = cellChildNode->GetPreviousSibling(getter_AddRefs(cellChildNode));
+            NS_ENSURE_SUCCESS(res, res);
+          }
+          // we also know cellChildNode cannot be null at this point because
+          // we tested IsEmptyCell(cellToMerge) above...
+          isBlock = false;
+          NodeIsBlock(cellChildNode, &isBlock);
+          // Lets check if targetCellChildNode is a block or a break
+          if (!isBlock && !nsTextEditUtils::IsBreak(cellChildNode)) {
+            // so both last visible node of target cell and first visible node of
+            // source cell are not blocks or breaks. We need to insert
+            // a break as first child of source cell so the merged contents
+            // are separated by that break.
+            nsCOMPtr<nsIDOMNode> brNode;
+            res = CreateBR(aCellToMerge, 0, address_of(brNode));
+            NS_ENSURE_SUCCESS(res, res);
+          }
+        }
+      }
     }
 
     // Move the contents
     while (cellToMerge->HasChildren()) {
       nsCOMPtr<nsIDOMNode> cellChild = cellToMerge->GetLastChild()->AsDOMNode();
-      nsresult res = DeleteNode(cellChild);
+      res = DeleteNode(cellChild);
       NS_ENSURE_SUCCESS(res, res);
 
       res = InsertNode(cellChild, aTargetCell, insertIndex);
diff -aur mozilla-release/editor/libeditor/html/nsWSRunObject.cpp mozilla-release.new/editor/libeditor/html/nsWSRunObject.cpp
--- mozilla-release/editor/libeditor/html/nsWSRunObject.cpp	2013-05-11 21:19:29.000000000 +0200
+++ mozilla-release.new/editor/libeditor/html/nsWSRunObject.cpp	2013-06-09 08:53:54.364019005 +0200
@@ -488,7 +488,7 @@
   // is there a visible run there or earlier?
   while (run)
   {
-    if (run->mType == WSType::normalWS) {
+    if (run->mType == WSType::normalWS || run->mType == WSType::trailingWS) {
       WSPoint point = GetCharBefore(aNode, aOffset);
       if (point.mTextNode)
       {
diff -aur mozilla-release/gfx/src/nsColor.cpp mozilla-release.new/gfx/src/nsColor.cpp
--- mozilla-release/gfx/src/nsColor.cpp	2013-05-11 21:19:31.000000000 +0200
+++ mozilla-release.new/gfx/src/nsColor.cpp	2013-06-09 08:55:52.396623506 +0200
@@ -217,6 +217,27 @@
   return false;
 }
 
+NS_GFX_(bool) NS_RGBToColorName(nscolor aColor, nsAString& aResult)
+{
+  PRUint8 a = NS_GET_A(aColor);
+  if (a < 255)
+    return false;
+  PRUint8 r = NS_GET_R(aColor);
+  PRUint8 g = NS_GET_G(aColor);
+  PRUint8 b = NS_GET_B(aColor);
+  PRUint32 colorIndex;
+  for (colorIndex = 0; colorIndex < eColorName_COUNT; colorIndex++) {
+    nscolor matchingColor = kColors[colorIndex];
+    if (NS_GET_R(matchingColor) == r
+        && NS_GET_G(matchingColor) == g
+        && NS_GET_B(matchingColor) == b) {
+      aResult.AppendASCII(kColorNames[colorIndex]);
+      return true;
+    }
+  }
+  return false;
+}
+
 // Macro to blend two colors
 //
 // equivalent to target = (bg*(255-fgalpha) + fg*fgalpha)/255
diff -aur mozilla-release/gfx/src/nsColor.h mozilla-release.new/gfx/src/nsColor.h
--- mozilla-release/gfx/src/nsColor.h	2013-05-11 21:19:31.000000000 +0200
+++ mozilla-release.new/gfx/src/nsColor.h	2013-06-09 08:56:57.001380050 +0200
@@ -66,6 +66,10 @@
 // otherwise return false.
 NS_GFX_(bool) NS_ColorNameToRGB(const nsAString& aBuf, nscolor* aResult);
 
+// Translate a color to a color name. Return true if it parses ok,
+// otherwise return false.
+NS_GFX_(bool) NS_RGBToColorName(nscolor aColor, nsAString& aResult);
+
 // function to convert from HSL color space to RGB color space
 // the float parameters are all expected to be in the range 0-1
 NS_GFX_(nscolor) NS_HSL2RGB(float h, float s, float l);
diff -aur mozilla-release/layout/style/Loader.cpp mozilla-release.new/layout/style/Loader.cpp
--- mozilla-release/layout/style/Loader.cpp	2013-05-11 21:19:42.000000000 +0200
+++ mozilla-release.new/layout/style/Loader.cpp	2013-06-09 08:59:25.917988349 +0200
@@ -1092,7 +1092,8 @@
     }
 #endif
 
-    if (!sheet) {
+    //XXX BlueGriffon force reload of stylesheets each time we need them
+    if (false /*!sheet*/) {
       // Then our per-document complete sheets.
       URIPrincipalAndCORSModeHashKey key(aURI, aLoaderPrincipal, aCORSMode);
 
diff -aur mozilla-release/layout/style/nsCSSValue.cpp mozilla-release.new/layout/style/nsCSSValue.cpp
--- mozilla-release/layout/style/nsCSSValue.cpp	2013-05-11 21:19:42.000000000 +0200
+++ mozilla-release.new/layout/style/nsCSSValue.cpp	2013-06-09 09:03:51.930488379 +0200
@@ -16,6 +16,7 @@
 #include "CSSCalc.h"
 #include "nsNetUtil.h"
 #include "mozilla/css/ImageLoader.h"
+#include "nsIPrefService.h"
 #include "mozilla/Likely.h"
 
 namespace css = mozilla::css;
@@ -857,31 +858,73 @@
     }
   }
   else if (eCSSUnit_Color == unit) {
+    bool outputCssNames = false;
+    nsresult rv;
+    nsCOMPtr<nsIPrefBranch> prefBranch = do_GetService(NS_PREFSERVICE_CONTRACTID, &rv);
+    if (NS_SUCCEEDED(rv) && prefBranch)
+      prefBranch->GetBoolPref("bluegriffon.css.colors.names.enabled", &outputCssNames);
+
     nscolor color = GetColorValue();
-    if (color == NS_RGBA(0, 0, 0, 0)) {
-      // Use the strictest match for 'transparent' so we do correct
-      // round-tripping of all other rgba() values.
-      aResult.AppendLiteral("transparent");
-    } else {
-      uint8_t a = NS_GET_A(color);
-      if (a < 255) {
-        aResult.AppendLiteral("rgba(");
+    bool foundName = false;
+    if (outputCssNames) {
+      nsAutoString nameColorStr;
+      foundName = NS_RGBToColorName(color, nameColorStr);
+      aResult.Append(nameColorStr);
+    }
+    if (!foundName) {
+      if (color == NS_RGBA(0, 0, 0, 0)) {
+        // Use the strictest match for 'transparent' so we do correct
+        // round-tripping of all other rgba() values.
+        aResult.AppendLiteral("transparent");
       } else {
-        aResult.AppendLiteral("rgb(");
-      }
+        PRUint8 a = NS_GET_A(color);
+        PRInt32 radix = 10;
+        nsXPIDLCString colorOutputType;
+        prefBranch->GetCharPref("bluegriffon.css.colors.type", getter_Copies(colorOutputType));
+        if (a < 255) {
+          aResult.AppendLiteral("rgba(");
+        } else {
+          if (!PL_strcmp(colorOutputType, "hex")) {
+            radix = 16;
+            aResult.AppendLiteral("#");
+          }
+          else
+            aResult.AppendLiteral("rgb(");
+        }
 
-      NS_NAMED_LITERAL_STRING(comma, ", ");
+        if (16 == radix) {
+          nsAutoString rStr, gStr, bStr;
+          rStr.Truncate();
+          gStr.Truncate();
+          bStr.Truncate();
+          rStr.AppendInt(NS_GET_R(color), radix);
+          gStr.AppendInt(NS_GET_G(color), radix);
+          bStr.AppendInt(NS_GET_B(color), radix);
+          if (1 == rStr.Length())
+            aResult.AppendLiteral("0");
+          aResult.Append(rStr);
+          if (1 == gStr.Length())
+            aResult.AppendLiteral("0");
+          aResult.Append(gStr);
+          if (1 == bStr.Length())
+            aResult.AppendLiteral("0");
+          aResult.Append(bStr);
+        }
+        else {
+          NS_NAMED_LITERAL_STRING(comma, ", ");
 
-      aResult.AppendInt(NS_GET_R(color), 10);
-      aResult.Append(comma);
-      aResult.AppendInt(NS_GET_G(color), 10);
-      aResult.Append(comma);
-      aResult.AppendInt(NS_GET_B(color), 10);
-      if (a < 255) {
-        aResult.Append(comma);
-        aResult.AppendFloat(nsStyleUtil::ColorComponentToFloat(a));
+          aResult.AppendInt(NS_GET_R(color), radix);
+          aResult.Append(comma);
+          aResult.AppendInt(NS_GET_G(color), radix);
+          aResult.Append(comma);
+          aResult.AppendInt(NS_GET_B(color), radix);
+          if (a < 255) {
+            aResult.Append(comma);
+            aResult.AppendFloat(nsStyleUtil::ColorComponentToFloat(a));
+          }
+          aResult.Append(PRUnichar(')'));
+        }
       }
-      aResult.Append(PRUnichar(')'));
     }
   }
   else if (eCSSUnit_URL == unit || eCSSUnit_Image == unit) {
diff -aur mozilla-release/parser/htmlparser/public/nsIExpatSink.idl mozilla-release.new/parser/htmlparser/public/nsIExpatSink.idl
--- mozilla-release/parser/htmlparser/public/nsIExpatSink.idl	2013-05-11 21:19:49.000000000 +0200
+++ mozilla-release.new/parser/htmlparser/public/nsIExpatSink.idl	2013-06-09 09:06:42.194212747 +0200
@@ -12,7 +12,7 @@
  * by any sink that handles some sort of XML dialect.
  */
 
-[scriptable, uuid(f61c56b5-ea5b-42b4-ad3c-17416e72e238)]
+[scriptable, uuid(2FFE2C0A-C27C-45FA-8BA4-E504D92A920F)]
 interface nsIExpatSink : nsISupports 
 {
   /**
@@ -109,5 +109,7 @@
    */
   boolean ReportError(in wstring aErrorText,
                       in wstring aSourceText,
-                      in nsIScriptError aError);
+                      in nsIScriptError aError,
+                      in unsigned long aLineNumber,
+                      in unsigned long aColNumber);
 }; 
diff -aur mozilla-release/parser/htmlparser/src/nsExpatDriver.cpp mozilla-release.new/parser/htmlparser/src/nsExpatDriver.cpp
--- mozilla-release/parser/htmlparser/src/nsExpatDriver.cpp	2013-05-11 21:19:49.000000000 +0200
+++ mozilla-release.new/parser/htmlparser/src/nsExpatDriver.cpp	2013-06-09 09:08:33.156636677 +0200
@@ -949,7 +949,9 @@
   if (mSink && shouldReportError) {
     rv = mSink->ReportError(errorText.get(), 
                             sourceText.get(), 
-                            serr, 
+                            serr,
+                            lineNumber,
+                            colNumber,
                             &shouldReportError);
     if (NS_FAILED(rv)) {
       shouldReportError = true;
diff -aur mozilla-release/parser/xml/src/nsSAXXMLReader.cpp mozilla-release.new/parser/xml/src/nsSAXXMLReader.cpp
--- mozilla-release/parser/xml/src/nsSAXXMLReader.cpp	2013-05-11 21:19:50.000000000 +0200
+++ mozilla-release.new/parser/xml/src/nsSAXXMLReader.cpp	2013-06-09 09:10:05.141977661 +0200
@@ -306,6 +306,8 @@
 nsSAXXMLReader::ReportError(const PRUnichar* aErrorText,
                             const PRUnichar* aSourceText,
                             nsIScriptError *aError,
+                            PRUint32 aLineNumber,
+                            PRUint32 aColNumber,
                             bool *_retval)
 {
   NS_PRECONDITION(aError && aSourceText && aErrorText, "Check arguments!!!");
diff -aur mozilla-release/rdf/base/src/nsRDFContentSink.cpp mozilla-release.new/rdf/base/src/nsRDFContentSink.cpp
--- mozilla-release/rdf/base/src/nsRDFContentSink.cpp	2013-05-11 21:19:50.000000000 +0200
+++ mozilla-release.new/rdf/base/src/nsRDFContentSink.cpp	2013-06-09 09:11:28.527129706 +0200
@@ -545,6 +545,8 @@
 RDFContentSinkImpl::ReportError(const PRUnichar* aErrorText, 
                                 const PRUnichar* aSourceText,
                                 nsIScriptError *aError,
+                                PRUint32 aLineNumber,
+                                PRUint32 aColNumber,
                                 bool *_retval)
 {
   NS_PRECONDITION(aError && aSourceText && aErrorText, "Check arguments!!!");
diff -aur mozilla-release/toolkit/content/widgets/menu.xml mozilla-release.new/toolkit/content/widgets/menu.xml
--- mozilla-release/toolkit/content/widgets/menu.xml	2013-05-11 21:19:53.000000000 +0200
+++ mozilla-release.new/toolkit/content/widgets/menu.xml	2013-06-09 09:13:43.746743384 +0200
@@ -228,6 +228,15 @@
     </content>
   </binding>
 
+  <binding id="menuitem-non-iconic-accel" extends="chrome://global/content/bindings/menu.xml#menuitem">
+    <content>
+      <xul:label class="menu-iconic-text" flex="1" xbl:inherits="value=label,accesskey,crop" crop="right"/>
+      <xul:hbox class="menu-accel-container" anonid="accel">
+        <xul:label class="menu-iconic-accel" xbl:inherits="value=acceltext"/>
+      </xul:hbox>
+    </content>
+  </binding>
+
   <binding id="menuitem-iconic-noaccel" extends="chrome://global/content/bindings/menu.xml#menuitem">
     <content>
       <xul:hbox class="menu-iconic-left" align="center" pack="center"
diff -aur mozilla-release/toolkit/content/widgets/popup.xml mozilla-release.new/toolkit/content/widgets/popup.xml
--- mozilla-release/toolkit/content/widgets/popup.xml	2013-05-11 21:19:53.000000000 +0200
+++ mozilla-release.new/toolkit/content/widgets/popup.xml	2013-06-09 09:16:00.046378082 +0200
@@ -412,6 +412,9 @@
               pack = (Math.abs(popupLeft - anchorLeft) < Math.abs(popupRight - anchorRight)) ? "start" : "end";
             }
 
+            if (this.getAttribute("forcearrow") == "true")
+              pack = "start";
+
             // In RTL, everything should be inverted.
             if (window.getComputedStyle(this).direction == "rtl") {
               pack = (pack == "start") ? "end" : "start";
@@ -455,9 +458,16 @@
         else {
           hideAnchor = true;
         }
+
+        var panelSide = anchorClass;
+        if (this.getAttribute("forcearrow") == "true") {
+          hideAnchor = false;
+          anchorClass = "top";
+          panelSide = "";
+        }
         arrow.hidden = hideAnchor;
         arrow.setAttribute("side", anchorClass);
-        this.setAttribute("side", anchorClass);
+        this.setAttribute("side", panelSide);
 
         // set fading
         var fade = this.getAttribute("fade");
diff -aur mozilla-release/toolkit/content/xul.css mozilla-release.new/toolkit/content/xul.css
--- mozilla-release/toolkit/content/xul.css	2013-05-11 21:19:53.000000000 +0200
+++ mozilla-release.new/toolkit/content/xul.css	2013-06-09 09:17:35.038445271 +0200
@@ -349,6 +349,10 @@
   -moz-binding: url("chrome://global/content/bindings/menu.xml#menuitem-iconic");
 }
 
+menuitem.menuitem-non-iconic-accel {
+  -moz-binding: url("chrome://global/content/bindings/menu.xml#menuitem-non-iconic-accel");
+}
+
 menuitem[description] {
   -moz-binding: url("chrome://global/content/bindings/menu.xml#menuitem-iconic-desc-noaccel");
 }
diff -aur mozilla-release/toolkit/mozapps/extensions/content/extensions.js mozilla-release.new/toolkit/mozapps/extensions/content/extensions.js
--- mozilla-release/toolkit/mozapps/extensions/content/extensions.js	2013-05-11 21:19:54.000000000 +0200
+++ mozilla-release.new/toolkit/mozapps/extensions/content/extensions.js	2013-06-09 09:20:31.145612480 +0200
@@ -24,6 +24,7 @@
 const PREF_GETADDONS_CACHE_ID_ENABLED = "extensions.%ID%.getAddons.cache.enabled";
 const PREF_UI_TYPE_HIDDEN = "extensions.ui.%TYPE%.hidden";
 const PREF_UI_LASTCATEGORY = "extensions.ui.lastCategory";
+const PREF_CLOSE_ADDONS_MANAGER_ON_ESCAPE = "extensions.closeOnEscape";
 
 const LOADING_MSG_DELAY = 100;
 
@@ -77,6 +78,18 @@
     return;
   }
   document.removeEventListener("load", initialize, true);
+
+  // should we allow the window to close when the user hits the ESC key?
+  let closeOnEscape = false; // default for Firefox 4+
+  try {
+    closeOnEscape = Services.prefs.getBoolPref(PREF_CLOSE_ADDONS_MANAGER_ON_ESCAPE);
+  } catch(e) { }
+  if (!closeOnEscape) {
+    let escapeKeyElt = document.getElementById("escapeKey");
+    if (escapeKeyElt)
+      escapeKeyElt.setAttribute("disabled", "true");
+  }
+
   gViewController.initialize();
   gCategories.initialize();
   gHeader.initialize();
@@ -2444,7 +2457,7 @@
     let prop = aIsInstall ? "mInstall" : "mAddon";
 
     for (let item of this._listBox.childNodes) {
-      if (item[prop] == aObj) {
+      if (prop in utem && item[prop] == aObj) {
         this._listBox.removeChild(item);
         this.showEmptyNotice(this._listBox.itemCount == 0);
         return;
diff -aur mozilla-release/toolkit/mozapps/extensions/content/extensions.xul mozilla-release.new/toolkit/mozapps/extensions/content/extensions.xul
--- mozilla-release/toolkit/mozapps/extensions/content/extensions.xul	2013-05-11 21:19:54.000000000 +0200
+++ mozilla-release.new/toolkit/mozapps/extensions/content/extensions.xul	2013-06-09 09:21:48.283958406 +0200
@@ -32,6 +32,10 @@
   <script type="application/javascript"
           src="chrome://global/content/contentAreaUtils.js"/>
 
+  <keyset>
+    <key id="escapeKey" keycode="VK_ESCAPE" oncommand="window.close()"/>
+  </keyset>
+
   <popupset>
     <!-- menu for an addon item -->
     <menupopup id="addonitem-popup">
diff -aur mozilla-release/toolkit/mozapps/handling/nsContentDispatchChooser.js mozilla-release.new/toolkit/mozapps/handling/nsContentDispatchChooser.js
--- mozilla-release/toolkit/mozapps/handling/nsContentDispatchChooser.js	2013-05-11 21:19:54.000000000 +0200
+++ mozilla-release.new/toolkit/mozapps/handling/nsContentDispatchChooser.js	2013-06-09 09:24:07.963664479 +0200
@@ -67,12 +67,44 @@
     params.appendElement(aURI, false);
     params.appendElement(aWindowContext, false);
     
+    // if a modal window is already shown, we need to open the app chooser
+    // as a modal window otherwise it will be unresponsive; bug 687423
+    var wm = Cc["@mozilla.org/appshell/window-mediator;1"].
+               getService(Ci.nsIWindowMediator);
+    var enumerator = wm.getXULWindowEnumerator(null);
+    var inModalState = false;
+    while (!inModalState && enumerator.hasMoreElements()) {
+      var win = enumerator.getNext();
+      var windowDocShell = win.QueryInterface(Ci.nsIXULWindow).docShell;
+  
+      var containedDocShells = windowDocShell.getDocShellEnumerator(
+                                        Ci.nsIDocShellTreeItem.typeChrome,
+                                        Ci.nsIDocShell.ENUMERATE_FORWARDS);
+
+      while (!inModalState && containedDocShells.hasMoreElements()) {
+        // Get the corresponding document for this docshell
+        var childDocShell = containedDocShells.getNext();
+
+        // We don't want it if it's not done loading.
+        if (childDocShell.busyFlags != Ci.nsIDocShell.BUSY_FLAGS_NONE)
+          continue;
+
+        // Ensure that we are only returning true if it is indeed modal
+        var chrome = win.QueryInterface(Ci.nsIInterfaceRequestor).
+                         getInterface(Ci.nsIWebBrowserChrome);
+        if (chrome.isWindowModal()) {
+          inModalState = true;
+        }
+      }
+    }
+
     var ww = Cc["@mozilla.org/embedcomp/window-watcher;1"].
              getService(Ci.nsIWindowWatcher);
     ww.openWindow(window,
                   CONTENT_HANDLING_URL,
                   null,
-                  "chrome,dialog=yes,resizable,centerscreen",
+                  "chrome,dialog=yes,resizable,centerscreen"
+                    + (inModalState ? ",modal" : ""),
                   params);
   },
 
diff -aur mozilla-release/widget/cocoa/nsMenuItemX.mm mozilla-release.new/widget/cocoa/nsMenuItemX.mm
--- mozilla-release/widget/cocoa/nsMenuItemX.mm	2013-05-11 21:19:55.000000000 +0200
+++ mozilla-release.new/widget/cocoa/nsMenuItemX.mm	2013-06-09 09:25:52.695942411 +0200
@@ -412,6 +412,29 @@
       uint8_t modifiers = nsMenuUtilsX::GeckoModifiersForNodeAttribute(modifiersStr);
 
       unsigned int macModifiers = nsMenuUtilsX::MacModifiersForGeckoModifiers(modifiers);
+      // If we're empty, try the keyCode instead.
+      if (keyChar.Equals(NS_LITERAL_STRING(" ")) || keyChar.IsEmpty()) {
+
+        keyContent->GetAttr(kNameSpaceID_None, nsGkAtoms::keycode, keyChar);
+
+        if (keyChar.Equals(NS_LITERAL_STRING("VK_F2"))) {
+          unichar ch[1];
+          ch[0] = NSF2FunctionKey;
+          macModifiers |= NSFunctionKeyMask;
+          [mNativeMenuItem setKeyEquivalentModifierMask:macModifiers];
+          [mNativeMenuItem setKeyEquivalent:[NSString stringWithCharacters:ch length:1]];
+          return;
+        }
+        else if (keyChar.Equals(NS_LITERAL_STRING("VK_F4"))) {
+          unichar ch[1];
+          ch[0] = NSF4FunctionKey;
+          macModifiers |= NSFunctionKeyMask;
+          [mNativeMenuItem setKeyEquivalentModifierMask:macModifiers];
+          [mNativeMenuItem setKeyEquivalent:[NSString stringWithCharacters:ch length:1]];
+          return;
+        }
+      }
+
       [mNativeMenuItem setKeyEquivalentModifierMask:macModifiers];
 
       NSString *keyEquivalent = [[NSString stringWithCharacters:(unichar*)keyChar.get()
diff -aur mozilla-release/widget/gtk2/nsWindow.cpp mozilla-release.new/widget/gtk2/nsWindow.cpp
--- mozilla-release/widget/gtk2/nsWindow.cpp	2013-05-11 21:19:56.000000000 +0200
+++ mozilla-release.new/widget/gtk2/nsWindow.cpp	2013-06-09 09:28:12.492315116 +0200
@@ -3495,6 +3495,8 @@
                 gdk_window_add_filter(gtk_widget_get_window(mShell),
                                       popup_take_focus_filter, NULL); 
 #endif
+                // XXX BlueGriffon ugly hack to work around bug 662770
+                gtk_window_set_modal(GTK_WINDOW(mShell), TRUE);
             }
 
             GdkWindowTypeHint gtkTypeHint;
