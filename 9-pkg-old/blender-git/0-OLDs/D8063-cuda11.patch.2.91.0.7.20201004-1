diff -aur blender/build_files/cmake/config/blender_release.cmake blender.new/build_files/cmake/config/blender_release.cmake
--- blender/build_files/cmake/config/blender_release.cmake	2020-09-27 11:25:14.000000000 +0200
+++ blender.new/build_files/cmake/config/blender_release.cmake	2020-10-04 17:19:51.409768447 +0200
@@ -55,7 +55,7 @@
 set(WITH_MEM_JEMALLOC          ON  CACHE BOOL "" FORCE)
 set(WITH_CYCLES_CUDA_BINARIES  ON  CACHE BOOL "" FORCE)
 set(WITH_CYCLES_CUBIN_COMPILER OFF CACHE BOOL "" FORCE)
-set(CYCLES_CUDA_BINARIES_ARCH sm_30;sm_35;sm_37;sm_50;sm_52;sm_60;sm_61;sm_70;sm_75;compute_75 CACHE STRING "" FORCE)
+set(CYCLES_CUDA_BINARIES_ARCH sm_30;sm_35;sm_37;sm_50;sm_52;sm_60;sm_61;sm_70;sm_75;sm_80;compute_80 CACHE STRING "" FORCE)
 set(WITH_CYCLES_DEVICE_OPTIX   ON CACHE BOOL "" FORCE)
 
 # platform dependent options
diff -aur blender/CMakeLists.txt blender.new/CMakeLists.txt
--- blender/CMakeLists.txt	2020-09-27 11:25:14.000000000 +0200
+++ blender.new/CMakeLists.txt	2020-10-04 17:19:15.043338179 +0200
@@ -376,7 +376,7 @@
 option(WITH_CYCLES_CUBIN_COMPILER   "Build cubins with nvrtc based compiler instead of nvcc" OFF)
 option(WITH_CYCLES_CUDA_BUILD_SERIAL "Build cubins one after another (useful on machines with limited RAM)" OFF)
 mark_as_advanced(WITH_CYCLES_CUDA_BUILD_SERIAL)
-set(CYCLES_CUDA_BINARIES_ARCH sm_30 sm_35 sm_37 sm_50 sm_52 sm_60 sm_61 sm_70 sm_75 compute_75 CACHE STRING "CUDA architectures to build binaries for")
+set(CYCLES_CUDA_BINARIES_ARCH sm_30 sm_35 sm_37 sm_50 sm_52 sm_60 sm_61 sm_70 sm_75 sm_80 compute_80 CACHE STRING "CUDA architectures to build binaries for")
 mark_as_advanced(CYCLES_CUDA_BINARIES_ARCH)
 unset(PLATFORM_DEFAULT)
 option(WITH_CYCLES_LOGGING  "Build Cycles with logging support" ON)
diff -aur blender/intern/cycles/CMakeLists.txt blender.new/intern/cycles/CMakeLists.txt
--- blender/intern/cycles/CMakeLists.txt	2020-09-27 11:25:14.000000000 +0200
+++ blender.new/intern/cycles/CMakeLists.txt	2020-10-04 17:21:17.332601116 +0200
@@ -344,7 +344,7 @@
       set(MAX_MSVC 1910)
     elseif(${CUDA_VERSION} EQUAL "9.1")
       set(MAX_MSVC 1911)
-    elseif(${CUDA_VERSION} LESS "11.0")
+    elseif(${CUDA_VERSION} LESS "12.0")
       set(MAX_MSVC 1999)
     endif()
     if(NOT MSVC_VERSION LESS ${MAX_MSVC} OR CMAKE_C_COMPILER_ID MATCHES "Clang")
diff -aur blender/intern/cycles/kernel/CMakeLists.txt blender.new/intern/cycles/kernel/CMakeLists.txt
--- blender/intern/cycles/kernel/CMakeLists.txt	2020-09-07 11:41:45.000000000 +0200
+++ blender.new/intern/cycles/kernel/CMakeLists.txt	2020-10-04 17:23:32.035288387 +0200
@@ -487,8 +487,12 @@
   foreach(arch ${CYCLES_CUDA_BINARIES_ARCH})
     if(${arch} MATCHES "sm_2.")
       message(STATUS "CUDA binaries for ${arch} are no longer supported, skipped.")
+    elseif(${arch} MATCHES "sm_30" AND ${CUDA_VERSION} GREATER 109)
+      message(STATUS "CUDA binaries for ${arch} are no longer supported, skipped.")
     elseif(${arch} MATCHES "sm_7." AND ${CUDA_VERSION} LESS 100)
       message(STATUS "CUDA binaries for ${arch} require CUDA 10.0+, skipped.")
+    elseif(${arch} MATCHES "sm_8." AND ${CUDA_VERSION} LESS 110)
+      message(STATUS "CUDA binaries for ${arch} require CUDA 11.0+, skipped.")
     else()
       # Compile regular kernel
       CYCLES_CUDA_KERNEL_ADD(${arch} ${prev_arch} filter "" "${cuda_filter_sources}" FALSE)
@@ -527,6 +531,11 @@
       set(cuda_flags ${cuda_flags}
         -D __KERNEL_DEBUG__)
     endif()
+    set(OPTIX_TARGET 30)
+    if(${CUDA_VERSION} GREATER 109) #cuda 11
+      set(OPTIX_TARGET 52)
+    endif()
+
     if(WITH_CYCLES_CUBIN_COMPILER)
 
       # Needed to find libnvrtc-builtins.so. Can't do it from inside
@@ -553,7 +562,7 @@
           ${SRC_UTIL_HEADERS}
         COMMAND ${CUBIN_CC_ENV}
             "$<TARGET_FILE:cycles_cubin_cc>"
-            -target 50
+            -target ${OPTIX_TARGET}
             -ptx
             -i ${CMAKE_CURRENT_SOURCE_DIR}/${input}
             ${cuda_flags}
@@ -577,7 +586,7 @@
         COMMAND
           ${CUDA_NVCC_EXECUTABLE}
           --ptx
-          -arch=sm_50
+          -arch=sm_${OPTIX_TARGET}
           ${cuda_flags}
           ${input}
         WORKING_DIRECTORY
